/*
* generated by Xtext
*/
parser grammar InternalCndParser;

options {
	tokenVocab=InternalCndLexer;
	superClass=AbstractInternalAntlrParser;
	
}

@header {
package com.github.evra.jcr.parser.antlr.internal; 

import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.AbstractInternalAntlrParser;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.parser.antlr.AntlrDatatypeRuleToken;
import com.github.evra.jcr.services.CndGrammarAccess;

}

@members {


	private CndGrammarAccess grammarAccess;
	 	
	public InternalCndParser(TokenStream input, CndGrammarAccess grammarAccess) {
		this(input);
		this.grammarAccess = grammarAccess;
		registerRules(grammarAccess.getGrammar());
	}
	
	@Override
	protected String getFirstRuleName() {
		return "Model";	
	} 
	   	   	
	@Override
	protected CndGrammarAccess getGrammarAccess() {
		return grammarAccess;
	}
}

@rulecatch { 
	catch (RecognitionException re) { 
	    recover(input,re); 
	    appendSkippedTokens();
	}
}




// Entry rule entryRuleModel
entryRuleModel returns [EObject current=null]
	:
	{ newCompositeNode(grammarAccess.getModelRule()); }
	 iv_ruleModel=ruleModel 
	 { $current=$iv_ruleModel.current; } 
	 EOF 
;

// Rule Model
ruleModel returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getModelAccess().getMappingsNsMappingParserRuleCall_0_0()); 
	    }
		lv_mappings_0_0=ruleNsMapping		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getModelRule());
	        }
       		add(
       			$current, 
       			"mappings",
        		lv_mappings_0_0, 
        		"NsMapping");
	        afterParserOrEnumRuleCall();
	    }

)
)
    |(
(
		{ 
	        newCompositeNode(grammarAccess.getModelAccess().getNodetypesNodeTypeDefParserRuleCall_1_0()); 
	    }
		lv_nodetypes_1_0=ruleNodeTypeDef		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getModelRule());
	        }
       		add(
       			$current, 
       			"nodetypes",
        		lv_nodetypes_1_0, 
        		"NodeTypeDef");
	        afterParserOrEnumRuleCall();
	    }

)
))*
;





// Entry rule entryRuleNodeTypeDef
entryRuleNodeTypeDef returns [EObject current=null]
	:
	{ newCompositeNode(grammarAccess.getNodeTypeDefRule()); }
	 iv_ruleNodeTypeDef=ruleNodeTypeDef 
	 { $current=$iv_ruleNodeTypeDef.current; } 
	 EOF 
;

// Rule NodeTypeDef
ruleNodeTypeDef returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getNodeTypeDefAccess().getNodeTypeNameParserRuleCall_0()); 
    }
    this_NodeTypeName_0=ruleNodeTypeName
    {
        $current = $this_NodeTypeName_0.current;
        afterParserOrEnumRuleCall();
    }
(
    { 
        newCompositeNode(grammarAccess.getNodeTypeDefAccess().getSuperTypesParserRuleCall_1()); 
    }
ruleSuperTypes
    {
        afterParserOrEnumRuleCall();
    }
)?(
(
		{ 
	        newCompositeNode(grammarAccess.getNodeTypeDefAccess().getAttributesNodeTypeAttributeParserRuleCall_2_0()); 
	    }
		lv_attributes_2_0=ruleNodeTypeAttribute		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getNodeTypeDefRule());
	        }
       		add(
       			$current, 
       			"attributes",
        		lv_attributes_2_0, 
        		"NodeTypeAttribute");
	        afterParserOrEnumRuleCall();
	    }

)
)*(
    { 
        newCompositeNode(grammarAccess.getNodeTypeDefAccess().getPropertyDefParserRuleCall_3_0()); 
    }
rulePropertyDef
    {
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getNodeTypeDefAccess().getChildNodeDefParserRuleCall_3_1()); 
    }
ruleChildNodeDef
    {
        afterParserOrEnumRuleCall();
    }
)*)
;





// Entry rule entryRuleChildNodeDef
entryRuleChildNodeDef returns [String current=null] 
:
	{ newCompositeNode(grammarAccess.getChildNodeDefRule()); } 
	 iv_ruleChildNodeDef=ruleChildNodeDef 
	 { $current=$iv_ruleChildNodeDef.current.getText(); }  
	 EOF 
;

// Rule ChildNodeDef
ruleChildNodeDef returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule();
    }:
(
    { 
        newCompositeNode(grammarAccess.getChildNodeDefAccess().getNodeNameParserRuleCall_0()); 
    }
    this_NodeName_0=ruleNodeName    {
		$current.merge(this_NodeName_0);
    }

    { 
        afterParserOrEnumRuleCall();
    }
(
    { 
        newCompositeNode(grammarAccess.getChildNodeDefAccess().getRequiredTypesParserRuleCall_1()); 
    }
    this_RequiredTypes_1=ruleRequiredTypes    {
		$current.merge(this_RequiredTypes_1);
    }

    { 
        afterParserOrEnumRuleCall();
    }
)?(
    { 
        newCompositeNode(grammarAccess.getChildNodeDefAccess().getDefaultTypeParserRuleCall_2()); 
    }
    this_DefaultType_2=ruleDefaultType    {
		$current.merge(this_DefaultType_2);
    }

    { 
        afterParserOrEnumRuleCall();
    }
)?(
    { 
        newCompositeNode(grammarAccess.getChildNodeDefAccess().getNodeAttributeParserRuleCall_3()); 
    }
    this_NodeAttribute_3=ruleNodeAttribute    {
		$current.merge(this_NodeAttribute_3);
    }

    { 
        afterParserOrEnumRuleCall();
    }
)*)
    ;





// Entry rule entryRuleNodeAttribute
entryRuleNodeAttribute returns [String current=null] 
:
	{ newCompositeNode(grammarAccess.getNodeAttributeRule()); } 
	 iv_ruleNodeAttribute=ruleNodeAttribute 
	 { $current=$iv_ruleNodeAttribute.current.getText(); }  
	 EOF 
;

// Rule NodeAttribute
ruleNodeAttribute returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule();
    }:
(
    { 
        newCompositeNode(grammarAccess.getNodeAttributeAccess().getAutocreatedParserRuleCall_0()); 
    }
    this_Autocreated_0=ruleAutocreated    {
		$current.merge(this_Autocreated_0);
    }

    { 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getNodeAttributeAccess().getMandatoryParserRuleCall_1()); 
    }
    this_Mandatory_1=ruleMandatory    {
		$current.merge(this_Mandatory_1);
    }

    { 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getNodeAttributeAccess().getProtectedParserRuleCall_2()); 
    }
    this_Protected_2=ruleProtected    {
		$current.merge(this_Protected_2);
    }

    { 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getNodeAttributeAccess().getOpvParserRuleCall_3()); 
    }
    this_Opv_3=ruleOpv    {
		$current.merge(this_Opv_3);
    }

    { 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getNodeAttributeAccess().getSnsParserRuleCall_4()); 
    }
    this_Sns_4=ruleSns    {
		$current.merge(this_Sns_4);
    }

    { 
        afterParserOrEnumRuleCall();
    }
)
    ;





// Entry rule entryRuleSns
entryRuleSns returns [String current=null] 
:
	{ newCompositeNode(grammarAccess.getSnsRule()); } 
	 iv_ruleSns=ruleSns 
	 { $current=$iv_ruleSns.current.getText(); }  
	 EOF 
;

// Rule Sns
ruleSns returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule();
    }:
((
	kw=KEYWORD_31 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getSnsAccess().getSnsKeyword_0_0()); 
    }

    |
	kw=KEYWORD_4 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getSnsAccess().getAsteriskKeyword_0_1()); 
    }

    |
	kw=KEYWORD_52 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getSnsAccess().getMultipleKeyword_0_2()); 
    }
)(
	kw=KEYWORD_11 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getSnsAccess().getQuestionMarkKeyword_1()); 
    }
)?)
    ;





// Entry rule entryRuleDefaultType
entryRuleDefaultType returns [String current=null] 
:
	{ newCompositeNode(grammarAccess.getDefaultTypeRule()); } 
	 iv_ruleDefaultType=ruleDefaultType 
	 { $current=$iv_ruleDefaultType.current.getText(); }  
	 EOF 
;

// Rule DefaultType
ruleDefaultType returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule();
    }:
(
	kw=KEYWORD_9 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getDefaultTypeAccess().getEqualsSignKeyword_0()); 
    }
(
    { 
        newCompositeNode(grammarAccess.getDefaultTypeAccess().getJcrStringParserRuleCall_1_0()); 
    }
    this_JcrString_1=ruleJcrString    {
		$current.merge(this_JcrString_1);
    }

    { 
        afterParserOrEnumRuleCall();
    }

    |
	kw=KEYWORD_11 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getDefaultTypeAccess().getQuestionMarkKeyword_1_1()); 
    }
))
    ;





// Entry rule entryRuleRequiredTypes
entryRuleRequiredTypes returns [String current=null] 
:
	{ newCompositeNode(grammarAccess.getRequiredTypesRule()); } 
	 iv_ruleRequiredTypes=ruleRequiredTypes 
	 { $current=$iv_ruleRequiredTypes.current.getText(); }  
	 EOF 
;

// Rule RequiredTypes
ruleRequiredTypes returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule();
    }:
(
	kw=KEYWORD_2 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getRequiredTypesAccess().getLeftParenthesisKeyword_0()); 
    }
(
    { 
        newCompositeNode(grammarAccess.getRequiredTypesAccess().getJcrStringListParserRuleCall_1_0()); 
    }
    this_JcrStringList_1=ruleJcrStringList    {
		$current.merge(this_JcrStringList_1);
    }

    { 
        afterParserOrEnumRuleCall();
    }

    |
	kw=KEYWORD_11 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getRequiredTypesAccess().getQuestionMarkKeyword_1_1()); 
    }
)
	kw=KEYWORD_3 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getRequiredTypesAccess().getRightParenthesisKeyword_2()); 
    }
)
    ;





// Entry rule entryRuleNodeName
entryRuleNodeName returns [String current=null] 
:
	{ newCompositeNode(grammarAccess.getNodeNameRule()); } 
	 iv_ruleNodeName=ruleNodeName 
	 { $current=$iv_ruleNodeName.current.getText(); }  
	 EOF 
;

// Rule NodeName
ruleNodeName returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule();
    }:
(
	kw=KEYWORD_5 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getNodeNameAccess().getPlusSignKeyword_0()); 
    }
(
    { 
        newCompositeNode(grammarAccess.getNodeNameAccess().getJcrStringParserRuleCall_1_0()); 
    }
    this_JcrString_1=ruleJcrString    {
		$current.merge(this_JcrString_1);
    }

    { 
        afterParserOrEnumRuleCall();
    }

    |
	kw=KEYWORD_4 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getNodeNameAccess().getAsteriskKeyword_1_1()); 
    }
))
    ;





// Entry rule entryRulePropertyDef
entryRulePropertyDef returns [String current=null] 
:
	{ newCompositeNode(grammarAccess.getPropertyDefRule()); } 
	 iv_rulePropertyDef=rulePropertyDef 
	 { $current=$iv_rulePropertyDef.current.getText(); }  
	 EOF 
;

// Rule PropertyDef
rulePropertyDef returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule();
    }:
(
    { 
        newCompositeNode(grammarAccess.getPropertyDefAccess().getPropertyNameParserRuleCall_0()); 
    }
    this_PropertyName_0=rulePropertyName    {
		$current.merge(this_PropertyName_0);
    }

    { 
        afterParserOrEnumRuleCall();
    }
(
    { 
        newCompositeNode(grammarAccess.getPropertyDefAccess().getPropertyTypeParserRuleCall_1()); 
    }
    this_PropertyType_1=rulePropertyType    {
		$current.merge(this_PropertyType_1);
    }

    { 
        afterParserOrEnumRuleCall();
    }
)?(
    { 
        newCompositeNode(grammarAccess.getPropertyDefAccess().getDefaultValuesParserRuleCall_2()); 
    }
    this_DefaultValues_2=ruleDefaultValues    {
		$current.merge(this_DefaultValues_2);
    }

    { 
        afterParserOrEnumRuleCall();
    }
)?(
    { 
        newCompositeNode(grammarAccess.getPropertyDefAccess().getPropertyAttributeParserRuleCall_3()); 
    }
    this_PropertyAttribute_3=rulePropertyAttribute    {
		$current.merge(this_PropertyAttribute_3);
    }

    { 
        afterParserOrEnumRuleCall();
    }
)*(
    { 
        newCompositeNode(grammarAccess.getPropertyDefAccess().getValueConstraintsParserRuleCall_4()); 
    }
    this_ValueConstraints_4=ruleValueConstraints    {
		$current.merge(this_ValueConstraints_4);
    }

    { 
        afterParserOrEnumRuleCall();
    }
)?)
    ;





// Entry rule entryRuleValueConstraints
entryRuleValueConstraints returns [String current=null] 
:
	{ newCompositeNode(grammarAccess.getValueConstraintsRule()); } 
	 iv_ruleValueConstraints=ruleValueConstraints 
	 { $current=$iv_ruleValueConstraints.current.getText(); }  
	 EOF 
;

// Rule ValueConstraints
ruleValueConstraints returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule();
    }:
(
	kw=KEYWORD_8 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getValueConstraintsAccess().getLessThanSignKeyword_0()); 
    }
(
    { 
        newCompositeNode(grammarAccess.getValueConstraintsAccess().getJcrStringListParserRuleCall_1_0()); 
    }
    this_JcrStringList_1=ruleJcrStringList    {
		$current.merge(this_JcrStringList_1);
    }

    { 
        afterParserOrEnumRuleCall();
    }

    |
	kw=KEYWORD_11 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getValueConstraintsAccess().getQuestionMarkKeyword_1_1()); 
    }
))
    ;





// Entry rule entryRulePropertyAttribute
entryRulePropertyAttribute returns [String current=null] 
:
	{ newCompositeNode(grammarAccess.getPropertyAttributeRule()); } 
	 iv_rulePropertyAttribute=rulePropertyAttribute 
	 { $current=$iv_rulePropertyAttribute.current.getText(); }  
	 EOF 
;

// Rule PropertyAttribute
rulePropertyAttribute returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule();
    }:
(
    { 
        newCompositeNode(grammarAccess.getPropertyAttributeAccess().getAutocreatedParserRuleCall_0()); 
    }
    this_Autocreated_0=ruleAutocreated    {
		$current.merge(this_Autocreated_0);
    }

    { 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getPropertyAttributeAccess().getMandatoryParserRuleCall_1()); 
    }
    this_Mandatory_1=ruleMandatory    {
		$current.merge(this_Mandatory_1);
    }

    { 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getPropertyAttributeAccess().getProtectedParserRuleCall_2()); 
    }
    this_Protected_2=ruleProtected    {
		$current.merge(this_Protected_2);
    }

    { 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getPropertyAttributeAccess().getOpvParserRuleCall_3()); 
    }
    this_Opv_3=ruleOpv    {
		$current.merge(this_Opv_3);
    }

    { 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getPropertyAttributeAccess().getMultipleParserRuleCall_4()); 
    }
    this_Multiple_4=ruleMultiple    {
		$current.merge(this_Multiple_4);
    }

    { 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getPropertyAttributeAccess().getQueryOpsParserRuleCall_5()); 
    }
    this_QueryOps_5=ruleQueryOps    {
		$current.merge(this_QueryOps_5);
    }

    { 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getPropertyAttributeAccess().getNoFullTextParserRuleCall_6()); 
    }
    this_NoFullText_6=ruleNoFullText    {
		$current.merge(this_NoFullText_6);
    }

    { 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getPropertyAttributeAccess().getNoQueryOrderParserRuleCall_7()); 
    }
    this_NoQueryOrder_7=ruleNoQueryOrder    {
		$current.merge(this_NoQueryOrder_7);
    }

    { 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getPropertyAttributeAccess().getPrimaryParserRuleCall_8()); 
    }
    this_Primary_8=rulePrimary    {
		$current.merge(this_Primary_8);
    }

    { 
        afterParserOrEnumRuleCall();
    }
)
    ;





// Entry rule entryRuleNoQueryOrder
entryRuleNoQueryOrder returns [String current=null] 
:
	{ newCompositeNode(grammarAccess.getNoQueryOrderRule()); } 
	 iv_ruleNoQueryOrder=ruleNoQueryOrder 
	 { $current=$iv_ruleNoQueryOrder.current.getText(); }  
	 EOF 
;

// Rule NoQueryOrder
ruleNoQueryOrder returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule();
    }:
((
	kw=KEYWORD_63 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getNoQueryOrderAccess().getNoqueryorderKeyword_0_0()); 
    }

    |
	kw=KEYWORD_39 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getNoQueryOrderAccess().getNqordKeyword_0_1()); 
    }
)(
	kw=KEYWORD_11 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getNoQueryOrderAccess().getQuestionMarkKeyword_1()); 
    }
)?)
    ;





// Entry rule entryRuleNoFullText
entryRuleNoFullText returns [String current=null] 
:
	{ newCompositeNode(grammarAccess.getNoFullTextRule()); } 
	 iv_ruleNoFullText=ruleNoFullText 
	 { $current=$iv_ruleNoFullText.current.getText(); }  
	 EOF 
;

// Rule NoFullText
ruleNoFullText returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule();
    }:
((
	kw=KEYWORD_60 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getNoFullTextAccess().getNofulltextKeyword_0_0()); 
    }

    |
	kw=KEYWORD_27 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getNoFullTextAccess().getNofKeyword_0_1()); 
    }
)(
	kw=KEYWORD_11 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getNoFullTextAccess().getQuestionMarkKeyword_1()); 
    }
)?)
    ;





// Entry rule entryRuleQueryOps
entryRuleQueryOps returns [String current=null] 
:
	{ newCompositeNode(grammarAccess.getQueryOpsRule()); } 
	 iv_ruleQueryOps=ruleQueryOps 
	 { $current=$iv_ruleQueryOps.current.getText(); }  
	 EOF 
;

// Rule QueryOps
ruleQueryOps returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule();
    }:
((
	kw=KEYWORD_53 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getQueryOpsAccess().getQueryopsKeyword_0_0()); 
    }

    |
	kw=KEYWORD_30 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getQueryOpsAccess().getQopKeyword_0_1()); 
    }
)(
    { 
        newCompositeNode(grammarAccess.getQueryOpsAccess().getJcrStringParserRuleCall_1_0()); 
    }
    this_JcrString_2=ruleJcrString    {
		$current.merge(this_JcrString_2);
    }

    { 
        afterParserOrEnumRuleCall();
    }

    |
	kw=KEYWORD_11 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getQueryOpsAccess().getQuestionMarkKeyword_1_1()); 
    }
))
    ;





// Entry rule entryRuleMultiple
entryRuleMultiple returns [String current=null] 
:
	{ newCompositeNode(grammarAccess.getMultipleRule()); } 
	 iv_ruleMultiple=ruleMultiple 
	 { $current=$iv_ruleMultiple.current.getText(); }  
	 EOF 
;

// Rule Multiple
ruleMultiple returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule();
    }:
((
	kw=KEYWORD_52 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getMultipleAccess().getMultipleKeyword_0_0()); 
    }

    |
	kw=KEYWORD_26 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getMultipleAccess().getMulKeyword_0_1()); 
    }

    |
	kw=KEYWORD_4 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getMultipleAccess().getAsteriskKeyword_0_2()); 
    }
)(
	kw=KEYWORD_11 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getMultipleAccess().getQuestionMarkKeyword_1()); 
    }
)?)
    ;





// Entry rule entryRuleOpv
entryRuleOpv returns [String current=null] 
:
	{ newCompositeNode(grammarAccess.getOpvRule()); } 
	 iv_ruleOpv=ruleOpv 
	 { $current=$iv_ruleOpv.current.getText(); }  
	 EOF 
;

// Rule Opv
ruleOpv returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule();
    }:
(
	kw=KEYWORD_32 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getOpvAccess().getCOPYKeyword_0()); 
    }

    |
	kw=KEYWORD_48 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getOpvAccess().getVERSIONKeyword_1()); 
    }

    |
	kw=KEYWORD_59 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getOpvAccess().getINITIALIZEKeyword_2()); 
    }

    |
	kw=KEYWORD_46 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getOpvAccess().getCOMPUTEKeyword_3()); 
    }

    |
	kw=KEYWORD_43 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getOpvAccess().getIGNOREKeyword_4()); 
    }

    |
	kw=KEYWORD_37 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getOpvAccess().getABORTKeyword_5()); 
    }

    |(
	kw=KEYWORD_20 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getOpvAccess().getOPVKeyword_6_0()); 
    }

	kw=KEYWORD_11 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getOpvAccess().getQuestionMarkKeyword_6_1()); 
    }
))
    ;





// Entry rule entryRuleProtected
entryRuleProtected returns [String current=null] 
:
	{ newCompositeNode(grammarAccess.getProtectedRule()); } 
	 iv_ruleProtected=ruleProtected 
	 { $current=$iv_ruleProtected.current.getText(); }  
	 EOF 
;

// Rule Protected
ruleProtected returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule();
    }:
((
	kw=KEYWORD_58 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getProtectedAccess().getProtectedKeyword_0_0()); 
    }

    |
	kw=KEYWORD_29 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getProtectedAccess().getProKeyword_0_1()); 
    }

    |
	kw=KEYWORD_17 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getProtectedAccess().getPKeyword_0_2()); 
    }
)(
	kw=KEYWORD_11 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getProtectedAccess().getQuestionMarkKeyword_1()); 
    }
)?)
    ;





// Entry rule entryRuleMandatory
entryRuleMandatory returns [String current=null] 
:
	{ newCompositeNode(grammarAccess.getMandatoryRule()); } 
	 iv_ruleMandatory=ruleMandatory 
	 { $current=$iv_ruleMandatory.current.getText(); }  
	 EOF 
;

// Rule Mandatory
ruleMandatory returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule();
    }:
((
	kw=KEYWORD_56 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getMandatoryAccess().getMandatoryKeyword_0_0()); 
    }

    |
	kw=KEYWORD_24 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getMandatoryAccess().getManKeyword_0_1()); 
    }

    |
	kw=KEYWORD_15 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getMandatoryAccess().getMKeyword_0_2()); 
    }
)(
	kw=KEYWORD_11 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getMandatoryAccess().getQuestionMarkKeyword_1()); 
    }
)?)
    ;





// Entry rule entryRuleAutocreated
entryRuleAutocreated returns [String current=null] 
:
	{ newCompositeNode(grammarAccess.getAutocreatedRule()); } 
	 iv_ruleAutocreated=ruleAutocreated 
	 { $current=$iv_ruleAutocreated.current.getText(); }  
	 EOF 
;

// Rule Autocreated
ruleAutocreated returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule();
    }:
((
	kw=KEYWORD_61 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getAutocreatedAccess().getAutocreatedKeyword_0_0()); 
    }

    |
	kw=KEYWORD_23 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getAutocreatedAccess().getAutKeyword_0_1()); 
    }

    |
	kw=KEYWORD_14 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getAutocreatedAccess().getAKeyword_0_2()); 
    }
)(
	kw=KEYWORD_11 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getAutocreatedAccess().getQuestionMarkKeyword_1()); 
    }
)?)
    ;





// Entry rule entryRulePrimary
entryRulePrimary returns [String current=null] 
:
	{ newCompositeNode(grammarAccess.getPrimaryRule()); } 
	 iv_rulePrimary=rulePrimary 
	 { $current=$iv_rulePrimary.current.getText(); }  
	 EOF 
;

// Rule Primary
rulePrimary returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule();
    }:
(
	kw=KEYWORD_50 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getPrimaryAccess().getPrimaryKeyword_0()); 
    }

    |
	kw=KEYWORD_1 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getPrimaryAccess().getExclamationMarkKeyword_1()); 
    }
)
    ;





// Entry rule entryRuleDefaultValues
entryRuleDefaultValues returns [String current=null] 
:
	{ newCompositeNode(grammarAccess.getDefaultValuesRule()); } 
	 iv_ruleDefaultValues=ruleDefaultValues 
	 { $current=$iv_ruleDefaultValues.current.getText(); }  
	 EOF 
;

// Rule DefaultValues
ruleDefaultValues returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule();
    }:
(
	kw=KEYWORD_9 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getDefaultValuesAccess().getEqualsSignKeyword_0()); 
    }
(
    { 
        newCompositeNode(grammarAccess.getDefaultValuesAccess().getJcrStringListParserRuleCall_1_0()); 
    }
    this_JcrStringList_1=ruleJcrStringList    {
		$current.merge(this_JcrStringList_1);
    }

    { 
        afterParserOrEnumRuleCall();
    }

    |
	kw=KEYWORD_11 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getDefaultValuesAccess().getQuestionMarkKeyword_1_1()); 
    }
))
    ;





// Entry rule entryRulePropertyType
entryRulePropertyType returns [String current=null] 
:
	{ newCompositeNode(grammarAccess.getPropertyTypeRule()); } 
	 iv_rulePropertyType=rulePropertyType 
	 { $current=$iv_rulePropertyType.current.getText(); }  
	 EOF 
;

// Rule PropertyType
rulePropertyType returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule();
    }:
(
	kw=KEYWORD_2 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getPropertyTypeAccess().getLeftParenthesisKeyword_0()); 
    }
(
	kw=KEYWORD_44 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getPropertyTypeAccess().getSTRINGKeyword_1_0()); 
    }

    |
	kw=KEYWORD_41 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getPropertyTypeAccess().getBINARYKeyword_1_1()); 
    }

    |
	kw=KEYWORD_34 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getPropertyTypeAccess().getLONGKeyword_1_2()); 
    }

    |
	kw=KEYWORD_42 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getPropertyTypeAccess().getDOUBLEKeyword_1_3()); 
    }

    |
	kw=KEYWORD_45 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getPropertyTypeAccess().getBOOLEANKeyword_1_4()); 
    }

    |
	kw=KEYWORD_33 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getPropertyTypeAccess().getDATEKeyword_1_5()); 
    }

    |
	kw=KEYWORD_35 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getPropertyTypeAccess().getNAMEKeyword_1_6()); 
    }

    |
	kw=KEYWORD_36 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getPropertyTypeAccess().getPATHKeyword_1_7()); 
    }

    |
	kw=KEYWORD_54 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getPropertyTypeAccess().getREFERENCEKeyword_1_8()); 
    }

    |
	kw=KEYWORD_64 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getPropertyTypeAccess().getWEAKREFERENCEKeyword_1_9()); 
    }

    |
	kw=KEYWORD_47 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getPropertyTypeAccess().getDECIMALKeyword_1_10()); 
    }

    |
	kw=KEYWORD_21 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getPropertyTypeAccess().getURIKeyword_1_11()); 
    }

    |
	kw=KEYWORD_55 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getPropertyTypeAccess().getUNDEFINEDKeyword_1_12()); 
    }

    |
	kw=KEYWORD_4 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getPropertyTypeAccess().getAsteriskKeyword_1_13()); 
    }

    |
	kw=KEYWORD_11 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getPropertyTypeAccess().getQuestionMarkKeyword_1_14()); 
    }
)
	kw=KEYWORD_3 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getPropertyTypeAccess().getRightParenthesisKeyword_2()); 
    }
)
    ;





// Entry rule entryRulePropertyName
entryRulePropertyName returns [String current=null] 
:
	{ newCompositeNode(grammarAccess.getPropertyNameRule()); } 
	 iv_rulePropertyName=rulePropertyName 
	 { $current=$iv_rulePropertyName.current.getText(); }  
	 EOF 
;

// Rule PropertyName
rulePropertyName returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule();
    }:
(
	kw=KEYWORD_7 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getPropertyNameAccess().getHyphenMinusKeyword_0()); 
    }
(
    { 
        newCompositeNode(grammarAccess.getPropertyNameAccess().getJcrStringParserRuleCall_1_0()); 
    }
    this_JcrString_1=ruleJcrString    {
		$current.merge(this_JcrString_1);
    }

    { 
        afterParserOrEnumRuleCall();
    }

    |
	kw=KEYWORD_4 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getPropertyNameAccess().getAsteriskKeyword_1_1()); 
    }
))
    ;





// Entry rule entryRuleNodeTypeAttribute
entryRuleNodeTypeAttribute returns [String current=null] 
:
	{ newCompositeNode(grammarAccess.getNodeTypeAttributeRule()); } 
	 iv_ruleNodeTypeAttribute=ruleNodeTypeAttribute 
	 { $current=$iv_ruleNodeTypeAttribute.current.getText(); }  
	 EOF 
;

// Rule NodeTypeAttribute
ruleNodeTypeAttribute returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule();
    }:
(
    { 
        newCompositeNode(grammarAccess.getNodeTypeAttributeAccess().getOrderableParserRuleCall_0()); 
    }
    this_Orderable_0=ruleOrderable    {
		$current.merge(this_Orderable_0);
    }

    { 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getNodeTypeAttributeAccess().getMixinParserRuleCall_1()); 
    }
    this_Mixin_1=ruleMixin    {
		$current.merge(this_Mixin_1);
    }

    { 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getNodeTypeAttributeAccess().getAbstractParserRuleCall_2()); 
    }
    this_Abstract_2=ruleAbstract    {
		$current.merge(this_Abstract_2);
    }

    { 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getNodeTypeAttributeAccess().getQueryParserRuleCall_3()); 
    }
    this_Query_3=ruleQuery    {
		$current.merge(this_Query_3);
    }

    { 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getNodeTypeAttributeAccess().getPrimaryItemParserRuleCall_4()); 
    }
    this_PrimaryItem_4=rulePrimaryItem    {
		$current.merge(this_PrimaryItem_4);
    }

    { 
        afterParserOrEnumRuleCall();
    }
)
    ;





// Entry rule entryRulePrimaryItem
entryRulePrimaryItem returns [String current=null] 
:
	{ newCompositeNode(grammarAccess.getPrimaryItemRule()); } 
	 iv_rulePrimaryItem=rulePrimaryItem 
	 { $current=$iv_rulePrimaryItem.current.getText(); }  
	 EOF 
;

// Rule PrimaryItem
rulePrimaryItem returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule();
    }:
((
	kw=KEYWORD_62 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getPrimaryItemAccess().getPrimaryitemKeyword_0_0()); 
    }

    |
	kw=KEYWORD_1 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getPrimaryItemAccess().getExclamationMarkKeyword_0_1()); 
    }
)(
    { 
        newCompositeNode(grammarAccess.getPrimaryItemAccess().getJcrStringParserRuleCall_1_0()); 
    }
    this_JcrString_2=ruleJcrString    {
		$current.merge(this_JcrString_2);
    }

    { 
        afterParserOrEnumRuleCall();
    }

    |
	kw=KEYWORD_11 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getPrimaryItemAccess().getQuestionMarkKeyword_1_1()); 
    }
))
    ;





// Entry rule entryRuleQuery
entryRuleQuery returns [String current=null] 
:
	{ newCompositeNode(grammarAccess.getQueryRule()); } 
	 iv_ruleQuery=ruleQuery 
	 { $current=$iv_ruleQuery.current.getText(); }  
	 EOF 
;

// Rule Query
ruleQuery returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule();
    }:
((
	kw=KEYWORD_49 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getQueryAccess().getNoqueryKeyword_0_0()); 
    }

    |
	kw=KEYWORD_19 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getQueryAccess().getNqKeyword_0_1()); 
    }
)
    |(
	kw=KEYWORD_40 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getQueryAccess().getQueryKeyword_1_0()); 
    }

    |
	kw=KEYWORD_18 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getQueryAccess().getQKeyword_1_1()); 
    }
))
    ;





// Entry rule entryRuleAbstract
entryRuleAbstract returns [String current=null] 
:
	{ newCompositeNode(grammarAccess.getAbstractRule()); } 
	 iv_ruleAbstract=ruleAbstract 
	 { $current=$iv_ruleAbstract.current.getText(); }  
	 EOF 
;

// Rule Abstract
ruleAbstract returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule();
    }:
((
	kw=KEYWORD_51 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getAbstractAccess().getAbstractKeyword_0_0()); 
    }

    |
	kw=KEYWORD_22 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getAbstractAccess().getAbsKeyword_0_1()); 
    }

    |
	kw=KEYWORD_14 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getAbstractAccess().getAKeyword_0_2()); 
    }
)(
	kw=KEYWORD_11 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getAbstractAccess().getQuestionMarkKeyword_1()); 
    }
)?)
    ;





// Entry rule entryRuleMixin
entryRuleMixin returns [String current=null] 
:
	{ newCompositeNode(grammarAccess.getMixinRule()); } 
	 iv_ruleMixin=ruleMixin 
	 { $current=$iv_ruleMixin.current.getText(); }  
	 EOF 
;

// Rule Mixin
ruleMixin returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule();
    }:
((
	kw=KEYWORD_38 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getMixinAccess().getMixinKeyword_0_0()); 
    }

    |
	kw=KEYWORD_25 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getMixinAccess().getMixKeyword_0_1()); 
    }

    |
	kw=KEYWORD_15 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getMixinAccess().getMKeyword_0_2()); 
    }
)(
	kw=KEYWORD_11 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getMixinAccess().getQuestionMarkKeyword_1()); 
    }
)?)
    ;





// Entry rule entryRuleOrderable
entryRuleOrderable returns [String current=null] 
:
	{ newCompositeNode(grammarAccess.getOrderableRule()); } 
	 iv_ruleOrderable=ruleOrderable 
	 { $current=$iv_ruleOrderable.current.getText(); }  
	 EOF 
;

// Rule Orderable
ruleOrderable returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule();
    }:
((
	kw=KEYWORD_57 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getOrderableAccess().getOrderableKeyword_0_0()); 
    }

    |
	kw=KEYWORD_28 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getOrderableAccess().getOrdKeyword_0_1()); 
    }

    |
	kw=KEYWORD_16 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getOrderableAccess().getOKeyword_0_2()); 
    }
)(
	kw=KEYWORD_11 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getOrderableAccess().getQuestionMarkKeyword_1()); 
    }
)?)
    ;





// Entry rule entryRuleSuperTypes
entryRuleSuperTypes returns [String current=null] 
:
	{ newCompositeNode(grammarAccess.getSuperTypesRule()); } 
	 iv_ruleSuperTypes=ruleSuperTypes 
	 { $current=$iv_ruleSuperTypes.current.getText(); }  
	 EOF 
;

// Rule SuperTypes
ruleSuperTypes returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule();
    }:
(
	kw=KEYWORD_10 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getSuperTypesAccess().getGreaterThanSignKeyword_0()); 
    }
(
    { 
        newCompositeNode(grammarAccess.getSuperTypesAccess().getJcrStringListParserRuleCall_1_0()); 
    }
    this_JcrStringList_1=ruleJcrStringList    {
		$current.merge(this_JcrStringList_1);
    }

    { 
        afterParserOrEnumRuleCall();
    }

    |
	kw=KEYWORD_11 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getSuperTypesAccess().getQuestionMarkKeyword_1_1()); 
    }
))
    ;





// Entry rule entryRuleNodeTypeName
entryRuleNodeTypeName returns [EObject current=null]
	:
	{ newCompositeNode(grammarAccess.getNodeTypeNameRule()); }
	 iv_ruleNodeTypeName=ruleNodeTypeName 
	 { $current=$iv_ruleNodeTypeName.current; } 
	 EOF 
;

// Rule NodeTypeName
ruleNodeTypeName returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	otherlv_0=KEYWORD_12
    {
    	newLeafNode(otherlv_0, grammarAccess.getNodeTypeNameAccess().getLeftSquareBracketKeyword_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getNodeTypeNameAccess().getNameJcrStringParserRuleCall_1_0()); 
	    }
		lv_name_1_0=ruleJcrString		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getNodeTypeNameRule());
	        }
       		set(
       			$current, 
       			"name",
        		lv_name_1_0, 
        		"JcrString");
	        afterParserOrEnumRuleCall();
	    }

)
)
	otherlv_2=KEYWORD_13
    {
    	newLeafNode(otherlv_2, grammarAccess.getNodeTypeNameAccess().getRightSquareBracketKeyword_2());
    }
)
;





// Entry rule entryRuleNsMapping
entryRuleNsMapping returns [EObject current=null]
	:
	{ newCompositeNode(grammarAccess.getNsMappingRule()); }
	 iv_ruleNsMapping=ruleNsMapping 
	 { $current=$iv_ruleNsMapping.current; } 
	 EOF 
;

// Rule NsMapping
ruleNsMapping returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	otherlv_0=KEYWORD_8
    {
    	newLeafNode(otherlv_0, grammarAccess.getNsMappingAccess().getLessThanSignKeyword_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getNsMappingAccess().getNamePrefixParserRuleCall_1_0()); 
	    }
		lv_name_1_0=rulePrefix		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getNsMappingRule());
	        }
       		set(
       			$current, 
       			"name",
        		lv_name_1_0, 
        		"Prefix");
	        afterParserOrEnumRuleCall();
	    }

)
)
	otherlv_2=KEYWORD_9
    {
    	newLeafNode(otherlv_2, grammarAccess.getNsMappingAccess().getEqualsSignKeyword_2());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getNsMappingAccess().getUriUriParserRuleCall_3_0()); 
	    }
		lv_uri_3_0=ruleUri		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getNsMappingRule());
	        }
       		set(
       			$current, 
       			"uri",
        		lv_uri_3_0, 
        		"Uri");
	        afterParserOrEnumRuleCall();
	    }

)
)
	otherlv_4=KEYWORD_10
    {
    	newLeafNode(otherlv_4, grammarAccess.getNsMappingAccess().getGreaterThanSignKeyword_4());
    }
)
;





// Entry rule entryRulePrefix
entryRulePrefix returns [String current=null] 
:
	{ newCompositeNode(grammarAccess.getPrefixRule()); } 
	 iv_rulePrefix=rulePrefix 
	 { $current=$iv_rulePrefix.current.getText(); }  
	 EOF 
;

// Rule Prefix
rulePrefix returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule();
    }:

    { 
        newCompositeNode(grammarAccess.getPrefixAccess().getXiDParserRuleCall()); 
    }
    this_XiD_0=ruleXiD    {
		$current.merge(this_XiD_0);
    }

    { 
        afterParserOrEnumRuleCall();
    }

    ;





// Entry rule entryRuleUri
entryRuleUri returns [String current=null] 
:
	{ newCompositeNode(grammarAccess.getUriRule()); } 
	 iv_ruleUri=ruleUri 
	 { $current=$iv_ruleUri.current.getText(); }  
	 EOF 
;

// Rule Uri
ruleUri returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule();
    }:

    { 
        newCompositeNode(grammarAccess.getUriAccess().getJcrStringParserRuleCall()); 
    }
    this_JcrString_0=ruleJcrString    {
		$current.merge(this_JcrString_0);
    }

    { 
        afterParserOrEnumRuleCall();
    }

    ;





// Entry rule entryRuleJcrStringList
entryRuleJcrStringList returns [String current=null] 
:
	{ newCompositeNode(grammarAccess.getJcrStringListRule()); } 
	 iv_ruleJcrStringList=ruleJcrStringList 
	 { $current=$iv_ruleJcrStringList.current.getText(); }  
	 EOF 
;

// Rule JcrStringList
ruleJcrStringList returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule();
    }:
(
    { 
        newCompositeNode(grammarAccess.getJcrStringListAccess().getJcrStringParserRuleCall_0()); 
    }
    this_JcrString_0=ruleJcrString    {
		$current.merge(this_JcrString_0);
    }

    { 
        afterParserOrEnumRuleCall();
    }
(
	kw=KEYWORD_6 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getJcrStringListAccess().getCommaKeyword_1_0()); 
    }

    { 
        newCompositeNode(grammarAccess.getJcrStringListAccess().getJcrStringParserRuleCall_1_1()); 
    }
    this_JcrString_2=ruleJcrString    {
		$current.merge(this_JcrString_2);
    }

    { 
        afterParserOrEnumRuleCall();
    }
)*)
    ;





// Entry rule entryRuleJcrString
entryRuleJcrString returns [String current=null] 
:
	{ newCompositeNode(grammarAccess.getJcrStringRule()); } 
	 iv_ruleJcrString=ruleJcrString 
	 { $current=$iv_ruleJcrString.current.getText(); }  
	 EOF 
;

// Rule JcrString
ruleJcrString returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule();
    }:
(    this_STRING_0=RULE_STRING    {
		$current.merge(this_STRING_0);
    }

    { 
    newLeafNode(this_STRING_0, grammarAccess.getJcrStringAccess().getSTRINGTerminalRuleCall_0()); 
    }

    |
    { 
        newCompositeNode(grammarAccess.getJcrStringAccess().getXiDParserRuleCall_1()); 
    }
    this_XiD_1=ruleXiD    {
		$current.merge(this_XiD_1);
    }

    { 
        afterParserOrEnumRuleCall();
    }
)
    ;





// Entry rule entryRuleXiD
entryRuleXiD returns [String current=null] 
:
	{ newCompositeNode(grammarAccess.getXiDRule()); } 
	 iv_ruleXiD=ruleXiD 
	 { $current=$iv_ruleXiD.current.getText(); }  
	 EOF 
;

// Rule XiD
ruleXiD returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule();
    }:
(    this_EXID_0=RULE_EXID    {
		$current.merge(this_EXID_0);
    }

    { 
    newLeafNode(this_EXID_0, grammarAccess.getXiDAccess().getEXIDTerminalRuleCall_0()); 
    }

    |
	kw=KEYWORD_25 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getXiDAccess().getMixKeyword_1()); 
    }
)
    ;





