/*
* generated by Xtext
*/
package com.github.evra.jcr.services;

import com.google.inject.Singleton;
import com.google.inject.Inject;

import java.util.List;

import org.eclipse.xtext.*;
import org.eclipse.xtext.service.GrammarProvider;
import org.eclipse.xtext.service.AbstractElementFinder.*;

import org.eclipse.xtext.common.services.TerminalsGrammarAccess;

@Singleton
public class CndGrammarAccess extends AbstractGrammarElementFinder {
	
	
	public class ModelElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Model");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Assignment cNamespacesAssignment_0 = (Assignment)cAlternatives.eContents().get(0);
		private final RuleCall cNamespacesNsMappingParserRuleCall_0_0 = (RuleCall)cNamespacesAssignment_0.eContents().get(0);
		private final Assignment cNodeTypesAssignment_1 = (Assignment)cAlternatives.eContents().get(1);
		private final RuleCall cNodeTypesNodeTypeDefinitionParserRuleCall_1_0 = (RuleCall)cNodeTypesAssignment_1.eContents().get(0);
		
		////!! http://www.eclipse.org/forums/index.php/t/489632/
		//
		//Model:
		//
		//	(namespaces+=NsMapping | nodeTypes+=NodeTypeDefinition)*;
		public ParserRule getRule() { return rule; }

		//(namespaces+=NsMapping | nodeTypes+=NodeTypeDefinition)*
		public Alternatives getAlternatives() { return cAlternatives; }

		//namespaces+=NsMapping
		public Assignment getNamespacesAssignment_0() { return cNamespacesAssignment_0; }

		//NsMapping
		public RuleCall getNamespacesNsMappingParserRuleCall_0_0() { return cNamespacesNsMappingParserRuleCall_0_0; }

		//nodeTypes+=NodeTypeDefinition
		public Assignment getNodeTypesAssignment_1() { return cNodeTypesAssignment_1; }

		//NodeTypeDefinition
		public RuleCall getNodeTypesNodeTypeDefinitionParserRuleCall_1_0() { return cNodeTypesNodeTypeDefinitionParserRuleCall_1_0; }
	}

	public class NodeTypeDefinitionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "NodeTypeDefinition");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLeftSquareBracketKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameJcrStringParserRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cGreaterThanSignKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cDeclaredSupertypeNamesAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cDeclaredSupertypeNamesJcrStringParserRuleCall_3_1_0 = (RuleCall)cDeclaredSupertypeNamesAssignment_3_1.eContents().get(0);
		private final Group cGroup_3_2 = (Group)cGroup_3.eContents().get(2);
		private final Keyword cCommaKeyword_3_2_0 = (Keyword)cGroup_3_2.eContents().get(0);
		private final Assignment cDeclaredSupertypeNamesAssignment_3_2_1 = (Assignment)cGroup_3_2.eContents().get(1);
		private final RuleCall cDeclaredSupertypeNamesJcrStringParserRuleCall_3_2_1_0 = (RuleCall)cDeclaredSupertypeNamesAssignment_3_2_1.eContents().get(0);
		private final UnorderedGroup cUnorderedGroup_4 = (UnorderedGroup)cGroup.eContents().get(4);
		private final Assignment cOrderableAssignment_4_0 = (Assignment)cUnorderedGroup_4.eContents().get(0);
		private final RuleCall cOrderableOrderableParserRuleCall_4_0_0 = (RuleCall)cOrderableAssignment_4_0.eContents().get(0);
		private final Assignment cMixinAssignment_4_1 = (Assignment)cUnorderedGroup_4.eContents().get(1);
		private final RuleCall cMixinMixinParserRuleCall_4_1_0 = (RuleCall)cMixinAssignment_4_1.eContents().get(0);
		private final Assignment cAbstractAssignment_4_2 = (Assignment)cUnorderedGroup_4.eContents().get(2);
		private final RuleCall cAbstractAbstractParserRuleCall_4_2_0 = (RuleCall)cAbstractAssignment_4_2.eContents().get(0);
		private final Assignment cQueryableAssignment_4_3 = (Assignment)cUnorderedGroup_4.eContents().get(3);
		private final RuleCall cQueryableQueryableParserRuleCall_4_3_0 = (RuleCall)cQueryableAssignment_4_3.eContents().get(0);
		private final Assignment cNotqueryableAssignment_4_4 = (Assignment)cUnorderedGroup_4.eContents().get(4);
		private final RuleCall cNotqueryableNotqueryableParserRuleCall_4_4_0 = (RuleCall)cNotqueryableAssignment_4_4.eContents().get(0);
		private final Assignment cPrimaryItemAssignment_4_5 = (Assignment)cUnorderedGroup_4.eContents().get(5);
		private final RuleCall cPrimaryItemPrimaryItemParserRuleCall_4_5_0 = (RuleCall)cPrimaryItemAssignment_4_5.eContents().get(0);
		private final Alternatives cAlternatives_5 = (Alternatives)cGroup.eContents().get(5);
		private final Assignment cDeclaredPropertyDefinitionsAssignment_5_0 = (Assignment)cAlternatives_5.eContents().get(0);
		private final RuleCall cDeclaredPropertyDefinitionsPropertyDefinitionParserRuleCall_5_0_0 = (RuleCall)cDeclaredPropertyDefinitionsAssignment_5_0.eContents().get(0);
		private final Assignment cDeclaredChildNodeDefinitionsAssignment_5_1 = (Assignment)cAlternatives_5.eContents().get(1);
		private final RuleCall cDeclaredChildNodeDefinitionsNodeDefinitionParserRuleCall_5_1_0 = (RuleCall)cDeclaredChildNodeDefinitionsAssignment_5_1.eContents().get(0);
		
		//NodeTypeDefinition:
		//
		//	"[" name=JcrString "]" (">" declaredSupertypeNames+=JcrString ("," declaredSupertypeNames+=JcrString)*
		//
		//	/ *|'?' //variant  * /)? (orderable?=Orderable? //TODO find a way to map query flags on one field
		//
		//	& mixin?=Mixin? & abstract?=Abstract? & queryable?=Queryable? & notqueryable?=Notqueryable? & primaryItem=PrimaryItem?)
		//
		//	(declaredPropertyDefinitions+=PropertyDefinition | declaredChildNodeDefinitions+=NodeDefinition)*;
		public ParserRule getRule() { return rule; }

		//"[" name=JcrString "]" (">" declaredSupertypeNames+=JcrString ("," declaredSupertypeNames+=JcrString)*
		//
		/// *|'?' //variant  * /)? (orderable?=Orderable? //TODO find a way to map query flags on one field
		//
		//& mixin?=Mixin? & abstract?=Abstract? & queryable?=Queryable? & notqueryable?=Notqueryable? & primaryItem=PrimaryItem?)
		//
		//(declaredPropertyDefinitions+=PropertyDefinition | declaredChildNodeDefinitions+=NodeDefinition)*
		public Group getGroup() { return cGroup; }

		//"["
		public Keyword getLeftSquareBracketKeyword_0() { return cLeftSquareBracketKeyword_0; }

		//name=JcrString
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//JcrString
		public RuleCall getNameJcrStringParserRuleCall_1_0() { return cNameJcrStringParserRuleCall_1_0; }

		//"]"
		public Keyword getRightSquareBracketKeyword_2() { return cRightSquareBracketKeyword_2; }

		//(">" declaredSupertypeNames+=JcrString ("," declaredSupertypeNames+=JcrString)* / *|'?' //variant  * /)?
		public Group getGroup_3() { return cGroup_3; }

		//">"
		public Keyword getGreaterThanSignKeyword_3_0() { return cGreaterThanSignKeyword_3_0; }

		//declaredSupertypeNames+=JcrString
		public Assignment getDeclaredSupertypeNamesAssignment_3_1() { return cDeclaredSupertypeNamesAssignment_3_1; }

		//JcrString
		public RuleCall getDeclaredSupertypeNamesJcrStringParserRuleCall_3_1_0() { return cDeclaredSupertypeNamesJcrStringParserRuleCall_3_1_0; }

		//("," declaredSupertypeNames+=JcrString)*
		public Group getGroup_3_2() { return cGroup_3_2; }

		//","
		public Keyword getCommaKeyword_3_2_0() { return cCommaKeyword_3_2_0; }

		//declaredSupertypeNames+=JcrString
		public Assignment getDeclaredSupertypeNamesAssignment_3_2_1() { return cDeclaredSupertypeNamesAssignment_3_2_1; }

		//JcrString
		public RuleCall getDeclaredSupertypeNamesJcrStringParserRuleCall_3_2_1_0() { return cDeclaredSupertypeNamesJcrStringParserRuleCall_3_2_1_0; }

		//orderable?=Orderable? //TODO find a way to map query flags on one field
		//
		//& mixin?=Mixin? & abstract?=Abstract? & queryable?=Queryable? & notqueryable?=Notqueryable? & primaryItem=PrimaryItem?
		public UnorderedGroup getUnorderedGroup_4() { return cUnorderedGroup_4; }

		//orderable?=Orderable?
		public Assignment getOrderableAssignment_4_0() { return cOrderableAssignment_4_0; }

		//Orderable
		public RuleCall getOrderableOrderableParserRuleCall_4_0_0() { return cOrderableOrderableParserRuleCall_4_0_0; }

		//mixin?=Mixin?
		public Assignment getMixinAssignment_4_1() { return cMixinAssignment_4_1; }

		//Mixin
		public RuleCall getMixinMixinParserRuleCall_4_1_0() { return cMixinMixinParserRuleCall_4_1_0; }

		//abstract?=Abstract?
		public Assignment getAbstractAssignment_4_2() { return cAbstractAssignment_4_2; }

		//Abstract
		public RuleCall getAbstractAbstractParserRuleCall_4_2_0() { return cAbstractAbstractParserRuleCall_4_2_0; }

		//queryable?=Queryable?
		public Assignment getQueryableAssignment_4_3() { return cQueryableAssignment_4_3; }

		//Queryable
		public RuleCall getQueryableQueryableParserRuleCall_4_3_0() { return cQueryableQueryableParserRuleCall_4_3_0; }

		//notqueryable?=Notqueryable?
		public Assignment getNotqueryableAssignment_4_4() { return cNotqueryableAssignment_4_4; }

		//Notqueryable
		public RuleCall getNotqueryableNotqueryableParserRuleCall_4_4_0() { return cNotqueryableNotqueryableParserRuleCall_4_4_0; }

		//primaryItem=PrimaryItem?
		public Assignment getPrimaryItemAssignment_4_5() { return cPrimaryItemAssignment_4_5; }

		//PrimaryItem
		public RuleCall getPrimaryItemPrimaryItemParserRuleCall_4_5_0() { return cPrimaryItemPrimaryItemParserRuleCall_4_5_0; }

		//(declaredPropertyDefinitions+=PropertyDefinition | declaredChildNodeDefinitions+=NodeDefinition)*
		public Alternatives getAlternatives_5() { return cAlternatives_5; }

		//declaredPropertyDefinitions+=PropertyDefinition
		public Assignment getDeclaredPropertyDefinitionsAssignment_5_0() { return cDeclaredPropertyDefinitionsAssignment_5_0; }

		//PropertyDefinition
		public RuleCall getDeclaredPropertyDefinitionsPropertyDefinitionParserRuleCall_5_0_0() { return cDeclaredPropertyDefinitionsPropertyDefinitionParserRuleCall_5_0_0; }

		//declaredChildNodeDefinitions+=NodeDefinition
		public Assignment getDeclaredChildNodeDefinitionsAssignment_5_1() { return cDeclaredChildNodeDefinitionsAssignment_5_1; }

		//NodeDefinition
		public RuleCall getDeclaredChildNodeDefinitionsNodeDefinitionParserRuleCall_5_1_0() { return cDeclaredChildNodeDefinitionsNodeDefinitionParserRuleCall_5_1_0; }
	}

	public class NodeDefinitionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "NodeDefinition");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cPlusSignKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_1_0 = (Assignment)cAlternatives_1.eContents().get(0);
		private final RuleCall cNameJcrStringParserRuleCall_1_0_0 = (RuleCall)cNameAssignment_1_0.eContents().get(0);
		private final Assignment cNameAssignment_1_1 = (Assignment)cAlternatives_1.eContents().get(1);
		private final Keyword cNameAsteriskKeyword_1_1_0 = (Keyword)cNameAssignment_1_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cLeftParenthesisKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Group cGroup_2_1 = (Group)cGroup_2.eContents().get(1);
		private final Assignment cRequiredTypesAssignment_2_1_0 = (Assignment)cGroup_2_1.eContents().get(0);
		private final RuleCall cRequiredTypesJcrStringParserRuleCall_2_1_0_0 = (RuleCall)cRequiredTypesAssignment_2_1_0.eContents().get(0);
		private final Group cGroup_2_1_1 = (Group)cGroup_2_1.eContents().get(1);
		private final Keyword cCommaKeyword_2_1_1_0 = (Keyword)cGroup_2_1_1.eContents().get(0);
		private final Assignment cRequiredTypesAssignment_2_1_1_1 = (Assignment)cGroup_2_1_1.eContents().get(1);
		private final RuleCall cRequiredTypesJcrStringParserRuleCall_2_1_1_1_0 = (RuleCall)cRequiredTypesAssignment_2_1_1_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_2_2 = (Keyword)cGroup_2.eContents().get(2);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cEqualsSignKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cDefaultTypeAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cDefaultTypeJcrStringParserRuleCall_3_1_0 = (RuleCall)cDefaultTypeAssignment_3_1.eContents().get(0);
		private final UnorderedGroup cUnorderedGroup_4 = (UnorderedGroup)cGroup.eContents().get(4);
		private final Assignment cAutocreatedAssignment_4_0 = (Assignment)cUnorderedGroup_4.eContents().get(0);
		private final RuleCall cAutocreatedAutocreatedParserRuleCall_4_0_0 = (RuleCall)cAutocreatedAssignment_4_0.eContents().get(0);
		private final Assignment cManadatoryAssignment_4_1 = (Assignment)cUnorderedGroup_4.eContents().get(1);
		private final RuleCall cManadatoryMandatoryParserRuleCall_4_1_0 = (RuleCall)cManadatoryAssignment_4_1.eContents().get(0);
		private final Assignment cProtectedAssignment_4_2 = (Assignment)cUnorderedGroup_4.eContents().get(2);
		private final RuleCall cProtectedProtectedParserRuleCall_4_2_0 = (RuleCall)cProtectedAssignment_4_2.eContents().get(0);
		private final Assignment cOnParentVersionAssignment_4_3 = (Assignment)cUnorderedGroup_4.eContents().get(3);
		private final RuleCall cOnParentVersionOpvEnumRuleCall_4_3_0 = (RuleCall)cOnParentVersionAssignment_4_3.eContents().get(0);
		private final Assignment cSameNameSiblingsAssignment_4_4 = (Assignment)cUnorderedGroup_4.eContents().get(4);
		private final RuleCall cSameNameSiblingsSnsParserRuleCall_4_4_0 = (RuleCall)cSameNameSiblingsAssignment_4_4.eContents().get(0);
		
		//NodeDefinition:
		//
		//	"+" (name=JcrString / *Jackrabbit feature * / //TODO check if it is used in Jackrabbit examples
		//
		//	| name="*") ("(" (requiredTypes+=JcrString ("," requiredTypes+=JcrString)*) / *| '?' //variant  * / ")")? ("="
		//
		//	defaultType=JcrString / *| '?' //variant  * /)? (autocreated?=Autocreated? & manadatory?=Mandatory? &
		//
		//	protected?=Protected? & onParentVersion=Opv? & sameNameSiblings?=Sns?);
		public ParserRule getRule() { return rule; }

		//"+" (name=JcrString / *Jackrabbit feature * / //TODO check if it is used in Jackrabbit examples
		//
		//| name="*") ("(" (requiredTypes+=JcrString ("," requiredTypes+=JcrString)*) / *| '?' //variant  * / ")")? ("="
		//
		//defaultType=JcrString / *| '?' //variant  * /)? (autocreated?=Autocreated? & manadatory?=Mandatory? &
		//
		//protected?=Protected? & onParentVersion=Opv? & sameNameSiblings?=Sns?)
		public Group getGroup() { return cGroup; }

		//"+"
		public Keyword getPlusSignKeyword_0() { return cPlusSignKeyword_0; }

		//name=JcrString / *Jackrabbit feature * / //TODO check if it is used in Jackrabbit examples
		//
		//| name="*"
		public Alternatives getAlternatives_1() { return cAlternatives_1; }

		//name=JcrString
		public Assignment getNameAssignment_1_0() { return cNameAssignment_1_0; }

		//JcrString
		public RuleCall getNameJcrStringParserRuleCall_1_0_0() { return cNameJcrStringParserRuleCall_1_0_0; }

		//name="*"
		public Assignment getNameAssignment_1_1() { return cNameAssignment_1_1; }

		//"*"
		public Keyword getNameAsteriskKeyword_1_1_0() { return cNameAsteriskKeyword_1_1_0; }

		//("(" (requiredTypes+=JcrString ("," requiredTypes+=JcrString)*) / *| '?' //variant  * / ")")?
		public Group getGroup_2() { return cGroup_2; }

		//"("
		public Keyword getLeftParenthesisKeyword_2_0() { return cLeftParenthesisKeyword_2_0; }

		//requiredTypes+=JcrString ("," requiredTypes+=JcrString)*
		public Group getGroup_2_1() { return cGroup_2_1; }

		//requiredTypes+=JcrString
		public Assignment getRequiredTypesAssignment_2_1_0() { return cRequiredTypesAssignment_2_1_0; }

		//JcrString
		public RuleCall getRequiredTypesJcrStringParserRuleCall_2_1_0_0() { return cRequiredTypesJcrStringParserRuleCall_2_1_0_0; }

		//("," requiredTypes+=JcrString)*
		public Group getGroup_2_1_1() { return cGroup_2_1_1; }

		//","
		public Keyword getCommaKeyword_2_1_1_0() { return cCommaKeyword_2_1_1_0; }

		//requiredTypes+=JcrString
		public Assignment getRequiredTypesAssignment_2_1_1_1() { return cRequiredTypesAssignment_2_1_1_1; }

		//JcrString
		public RuleCall getRequiredTypesJcrStringParserRuleCall_2_1_1_1_0() { return cRequiredTypesJcrStringParserRuleCall_2_1_1_1_0; }

		//")"
		public Keyword getRightParenthesisKeyword_2_2() { return cRightParenthesisKeyword_2_2; }

		//("=" defaultType=JcrString / *| '?' //variant  * /)?
		public Group getGroup_3() { return cGroup_3; }

		//"="
		public Keyword getEqualsSignKeyword_3_0() { return cEqualsSignKeyword_3_0; }

		//defaultType=JcrString
		public Assignment getDefaultTypeAssignment_3_1() { return cDefaultTypeAssignment_3_1; }

		//JcrString
		public RuleCall getDefaultTypeJcrStringParserRuleCall_3_1_0() { return cDefaultTypeJcrStringParserRuleCall_3_1_0; }

		//autocreated?=Autocreated? & manadatory?=Mandatory? & protected?=Protected? & onParentVersion=Opv? &
		//
		//sameNameSiblings?=Sns?
		public UnorderedGroup getUnorderedGroup_4() { return cUnorderedGroup_4; }

		//autocreated?=Autocreated?
		public Assignment getAutocreatedAssignment_4_0() { return cAutocreatedAssignment_4_0; }

		//Autocreated
		public RuleCall getAutocreatedAutocreatedParserRuleCall_4_0_0() { return cAutocreatedAutocreatedParserRuleCall_4_0_0; }

		//manadatory?=Mandatory?
		public Assignment getManadatoryAssignment_4_1() { return cManadatoryAssignment_4_1; }

		//Mandatory
		public RuleCall getManadatoryMandatoryParserRuleCall_4_1_0() { return cManadatoryMandatoryParserRuleCall_4_1_0; }

		//protected?=Protected?
		public Assignment getProtectedAssignment_4_2() { return cProtectedAssignment_4_2; }

		//Protected
		public RuleCall getProtectedProtectedParserRuleCall_4_2_0() { return cProtectedProtectedParserRuleCall_4_2_0; }

		//onParentVersion=Opv?
		public Assignment getOnParentVersionAssignment_4_3() { return cOnParentVersionAssignment_4_3; }

		//Opv
		public RuleCall getOnParentVersionOpvEnumRuleCall_4_3_0() { return cOnParentVersionOpvEnumRuleCall_4_3_0; }

		//sameNameSiblings?=Sns?
		public Assignment getSameNameSiblingsAssignment_4_4() { return cSameNameSiblingsAssignment_4_4; }

		//Sns
		public RuleCall getSameNameSiblingsSnsParserRuleCall_4_4_0() { return cSameNameSiblingsSnsParserRuleCall_4_4_0; }
	}

	public class SnsElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Sns");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cSnsKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cAsteriskKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		private final Keyword cMultipleKeyword_2 = (Keyword)cAlternatives.eContents().get(2);
		
		//Sns:
		//
		//	"sns" / * Jackrabbit feature* / / * '?' //variant * / | "*" | "multiple";
		public ParserRule getRule() { return rule; }

		//"sns" / * Jackrabbit feature* / / * '?' //variant * / | "*" | "multiple"
		public Alternatives getAlternatives() { return cAlternatives; }

		//"sns"
		public Keyword getSnsKeyword_0() { return cSnsKeyword_0; }

		//"*"
		public Keyword getAsteriskKeyword_1() { return cAsteriskKeyword_1; }

		//"multiple"
		public Keyword getMultipleKeyword_2() { return cMultipleKeyword_2; }
	}

	public class PropertyDefinitionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "PropertyDefinition");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cPropertyDefinitionAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cHyphenMinusKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Alternatives cAlternatives_2 = (Alternatives)cGroup.eContents().get(2);
		private final Assignment cNameAssignment_2_0 = (Assignment)cAlternatives_2.eContents().get(0);
		private final RuleCall cNameJcrStringParserRuleCall_2_0_0 = (RuleCall)cNameAssignment_2_0.eContents().get(0);
		private final Keyword cAsteriskKeyword_2_1 = (Keyword)cAlternatives_2.eContents().get(1);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cLeftParenthesisKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cTypeAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cTypePropertyTypeEnumRuleCall_3_1_0 = (RuleCall)cTypeAssignment_3_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_3_2 = (Keyword)cGroup_3.eContents().get(2);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cEqualsSignKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Group cGroup_4_1 = (Group)cGroup_4.eContents().get(1);
		private final Assignment cDefaultValuesAssignment_4_1_0 = (Assignment)cGroup_4_1.eContents().get(0);
		private final RuleCall cDefaultValuesJcrStringParserRuleCall_4_1_0_0 = (RuleCall)cDefaultValuesAssignment_4_1_0.eContents().get(0);
		private final Group cGroup_4_1_1 = (Group)cGroup_4_1.eContents().get(1);
		private final Keyword cCommaKeyword_4_1_1_0 = (Keyword)cGroup_4_1_1.eContents().get(0);
		private final Assignment cDefaultValuesAssignment_4_1_1_1 = (Assignment)cGroup_4_1_1.eContents().get(1);
		private final RuleCall cDefaultValuesJcrStringParserRuleCall_4_1_1_1_0 = (RuleCall)cDefaultValuesAssignment_4_1_1_1.eContents().get(0);
		private final UnorderedGroup cUnorderedGroup_5 = (UnorderedGroup)cGroup.eContents().get(5);
		private final Assignment cAutocreatedAssignment_5_0 = (Assignment)cUnorderedGroup_5.eContents().get(0);
		private final RuleCall cAutocreatedAutocreatedParserRuleCall_5_0_0 = (RuleCall)cAutocreatedAssignment_5_0.eContents().get(0);
		private final Assignment cMandatoryAssignment_5_1 = (Assignment)cUnorderedGroup_5.eContents().get(1);
		private final RuleCall cMandatoryMandatoryParserRuleCall_5_1_0 = (RuleCall)cMandatoryAssignment_5_1.eContents().get(0);
		private final Assignment cProtectedAssignment_5_2 = (Assignment)cUnorderedGroup_5.eContents().get(2);
		private final RuleCall cProtectedProtectedParserRuleCall_5_2_0 = (RuleCall)cProtectedAssignment_5_2.eContents().get(0);
		private final Assignment cOnParentVersionAssignment_5_3 = (Assignment)cUnorderedGroup_5.eContents().get(3);
		private final RuleCall cOnParentVersionOpvEnumRuleCall_5_3_0 = (RuleCall)cOnParentVersionAssignment_5_3.eContents().get(0);
		private final Assignment cMultipleAssignment_5_4 = (Assignment)cUnorderedGroup_5.eContents().get(4);
		private final RuleCall cMultipleMultipleParserRuleCall_5_4_0 = (RuleCall)cMultipleAssignment_5_4.eContents().get(0);
		private final Assignment cQueryOpsAssignment_5_5 = (Assignment)cUnorderedGroup_5.eContents().get(5);
		private final RuleCall cQueryOpsQueryOpsParserRuleCall_5_5_0 = (RuleCall)cQueryOpsAssignment_5_5.eContents().get(0);
		private final Assignment cNoFullTextAssignment_5_6 = (Assignment)cUnorderedGroup_5.eContents().get(6);
		private final RuleCall cNoFullTextNoFullTextParserRuleCall_5_6_0 = (RuleCall)cNoFullTextAssignment_5_6.eContents().get(0);
		private final Assignment cNoQueryOrderAssignment_5_7 = (Assignment)cUnorderedGroup_5.eContents().get(7);
		private final RuleCall cNoQueryOrderNoQueryOrderParserRuleCall_5_7_0 = (RuleCall)cNoQueryOrderAssignment_5_7.eContents().get(0);
		private final Assignment cPrimaryAssignment_5_8 = (Assignment)cUnorderedGroup_5.eContents().get(8);
		private final RuleCall cPrimaryPrimaryParserRuleCall_5_8_0 = (RuleCall)cPrimaryAssignment_5_8.eContents().get(0);
		private final Group cGroup_6 = (Group)cGroup.eContents().get(6);
		private final Keyword cLessThanSignKeyword_6_0 = (Keyword)cGroup_6.eContents().get(0);
		private final Group cGroup_6_1 = (Group)cGroup_6.eContents().get(1);
		private final Assignment cValueConstraintsAssignment_6_1_0 = (Assignment)cGroup_6_1.eContents().get(0);
		private final RuleCall cValueConstraintsJcrStringParserRuleCall_6_1_0_0 = (RuleCall)cValueConstraintsAssignment_6_1_0.eContents().get(0);
		private final Group cGroup_6_1_1 = (Group)cGroup_6_1.eContents().get(1);
		private final Keyword cCommaKeyword_6_1_1_0 = (Keyword)cGroup_6_1_1.eContents().get(0);
		private final Assignment cValueConstraintsAssignment_6_1_1_1 = (Assignment)cGroup_6_1_1.eContents().get(1);
		private final RuleCall cValueConstraintsJcrStringParserRuleCall_6_1_1_1_0 = (RuleCall)cValueConstraintsAssignment_6_1_1_1.eContents().get(0);
		
		//PropertyDefinition: //force creation
		//
		//	{PropertyDefinition} "-" (name=JcrString / *Jackrabbit feature * / | "*") ("(" type=PropertyType ")")? ("="
		//
		//	(defaultValues+=JcrString ("," defaultValues+=JcrString)*) / * | '?' //variant * /)? (autocreated?=Autocreated? &
		//
		//	mandatory?=Mandatory? & protected?=Protected? & onParentVersion=Opv? & multiple?=Multiple? & queryOps=QueryOps? &
		//
		//	noFullText?=NoFullText? & noQueryOrder?=NoQueryOrder? & primary?=Primary?) ("<" (valueConstraints+=JcrString (","
		//
		//	valueConstraints+=JcrString)*) / * | '?' //variant * /)?;
		public ParserRule getRule() { return rule; }

		////force creation
		//
		//{PropertyDefinition} "-" (name=JcrString / *Jackrabbit feature * / | "*") ("(" type=PropertyType ")")? ("="
		//
		//(defaultValues+=JcrString ("," defaultValues+=JcrString)*) / * | '?' //variant * /)? (autocreated?=Autocreated? &
		//
		//mandatory?=Mandatory? & protected?=Protected? & onParentVersion=Opv? & multiple?=Multiple? & queryOps=QueryOps? &
		//
		//noFullText?=NoFullText? & noQueryOrder?=NoQueryOrder? & primary?=Primary?) ("<" (valueConstraints+=JcrString (","
		//
		//valueConstraints+=JcrString)*) / * | '?' //variant * /)?
		public Group getGroup() { return cGroup; }

		////force creation
		//
		//{PropertyDefinition}
		public Action getPropertyDefinitionAction_0() { return cPropertyDefinitionAction_0; }

		//"-"
		public Keyword getHyphenMinusKeyword_1() { return cHyphenMinusKeyword_1; }

		//name=JcrString / *Jackrabbit feature * / | "*"
		public Alternatives getAlternatives_2() { return cAlternatives_2; }

		//name=JcrString
		public Assignment getNameAssignment_2_0() { return cNameAssignment_2_0; }

		//JcrString
		public RuleCall getNameJcrStringParserRuleCall_2_0_0() { return cNameJcrStringParserRuleCall_2_0_0; }

		//"*"
		public Keyword getAsteriskKeyword_2_1() { return cAsteriskKeyword_2_1; }

		//("(" type=PropertyType ")")?
		public Group getGroup_3() { return cGroup_3; }

		//"("
		public Keyword getLeftParenthesisKeyword_3_0() { return cLeftParenthesisKeyword_3_0; }

		//type=PropertyType
		public Assignment getTypeAssignment_3_1() { return cTypeAssignment_3_1; }

		//PropertyType
		public RuleCall getTypePropertyTypeEnumRuleCall_3_1_0() { return cTypePropertyTypeEnumRuleCall_3_1_0; }

		//")"
		public Keyword getRightParenthesisKeyword_3_2() { return cRightParenthesisKeyword_3_2; }

		//("=" (defaultValues+=JcrString ("," defaultValues+=JcrString)*) / * | '?' //variant * /)?
		public Group getGroup_4() { return cGroup_4; }

		//"="
		public Keyword getEqualsSignKeyword_4_0() { return cEqualsSignKeyword_4_0; }

		//defaultValues+=JcrString ("," defaultValues+=JcrString)*
		public Group getGroup_4_1() { return cGroup_4_1; }

		//defaultValues+=JcrString
		public Assignment getDefaultValuesAssignment_4_1_0() { return cDefaultValuesAssignment_4_1_0; }

		//JcrString
		public RuleCall getDefaultValuesJcrStringParserRuleCall_4_1_0_0() { return cDefaultValuesJcrStringParserRuleCall_4_1_0_0; }

		//("," defaultValues+=JcrString)*
		public Group getGroup_4_1_1() { return cGroup_4_1_1; }

		//","
		public Keyword getCommaKeyword_4_1_1_0() { return cCommaKeyword_4_1_1_0; }

		//defaultValues+=JcrString
		public Assignment getDefaultValuesAssignment_4_1_1_1() { return cDefaultValuesAssignment_4_1_1_1; }

		//JcrString
		public RuleCall getDefaultValuesJcrStringParserRuleCall_4_1_1_1_0() { return cDefaultValuesJcrStringParserRuleCall_4_1_1_1_0; }

		//autocreated?=Autocreated? & mandatory?=Mandatory? & protected?=Protected? & onParentVersion=Opv? & multiple?=Multiple? &
		//
		//queryOps=QueryOps? & noFullText?=NoFullText? & noQueryOrder?=NoQueryOrder? & primary?=Primary?
		public UnorderedGroup getUnorderedGroup_5() { return cUnorderedGroup_5; }

		//autocreated?=Autocreated?
		public Assignment getAutocreatedAssignment_5_0() { return cAutocreatedAssignment_5_0; }

		//Autocreated
		public RuleCall getAutocreatedAutocreatedParserRuleCall_5_0_0() { return cAutocreatedAutocreatedParserRuleCall_5_0_0; }

		//mandatory?=Mandatory?
		public Assignment getMandatoryAssignment_5_1() { return cMandatoryAssignment_5_1; }

		//Mandatory
		public RuleCall getMandatoryMandatoryParserRuleCall_5_1_0() { return cMandatoryMandatoryParserRuleCall_5_1_0; }

		//protected?=Protected?
		public Assignment getProtectedAssignment_5_2() { return cProtectedAssignment_5_2; }

		//Protected
		public RuleCall getProtectedProtectedParserRuleCall_5_2_0() { return cProtectedProtectedParserRuleCall_5_2_0; }

		//onParentVersion=Opv?
		public Assignment getOnParentVersionAssignment_5_3() { return cOnParentVersionAssignment_5_3; }

		//Opv
		public RuleCall getOnParentVersionOpvEnumRuleCall_5_3_0() { return cOnParentVersionOpvEnumRuleCall_5_3_0; }

		//multiple?=Multiple?
		public Assignment getMultipleAssignment_5_4() { return cMultipleAssignment_5_4; }

		//Multiple
		public RuleCall getMultipleMultipleParserRuleCall_5_4_0() { return cMultipleMultipleParserRuleCall_5_4_0; }

		//queryOps=QueryOps?
		public Assignment getQueryOpsAssignment_5_5() { return cQueryOpsAssignment_5_5; }

		//QueryOps
		public RuleCall getQueryOpsQueryOpsParserRuleCall_5_5_0() { return cQueryOpsQueryOpsParserRuleCall_5_5_0; }

		//noFullText?=NoFullText?
		public Assignment getNoFullTextAssignment_5_6() { return cNoFullTextAssignment_5_6; }

		//NoFullText
		public RuleCall getNoFullTextNoFullTextParserRuleCall_5_6_0() { return cNoFullTextNoFullTextParserRuleCall_5_6_0; }

		//noQueryOrder?=NoQueryOrder?
		public Assignment getNoQueryOrderAssignment_5_7() { return cNoQueryOrderAssignment_5_7; }

		//NoQueryOrder
		public RuleCall getNoQueryOrderNoQueryOrderParserRuleCall_5_7_0() { return cNoQueryOrderNoQueryOrderParserRuleCall_5_7_0; }

		//primary?=Primary?
		public Assignment getPrimaryAssignment_5_8() { return cPrimaryAssignment_5_8; }

		//Primary
		public RuleCall getPrimaryPrimaryParserRuleCall_5_8_0() { return cPrimaryPrimaryParserRuleCall_5_8_0; }

		//("<" (valueConstraints+=JcrString ("," valueConstraints+=JcrString)*) / * | '?' //variant * /)?
		public Group getGroup_6() { return cGroup_6; }

		//"<"
		public Keyword getLessThanSignKeyword_6_0() { return cLessThanSignKeyword_6_0; }

		//valueConstraints+=JcrString ("," valueConstraints+=JcrString)*
		public Group getGroup_6_1() { return cGroup_6_1; }

		//valueConstraints+=JcrString
		public Assignment getValueConstraintsAssignment_6_1_0() { return cValueConstraintsAssignment_6_1_0; }

		//JcrString
		public RuleCall getValueConstraintsJcrStringParserRuleCall_6_1_0_0() { return cValueConstraintsJcrStringParserRuleCall_6_1_0_0; }

		//("," valueConstraints+=JcrString)*
		public Group getGroup_6_1_1() { return cGroup_6_1_1; }

		//","
		public Keyword getCommaKeyword_6_1_1_0() { return cCommaKeyword_6_1_1_0; }

		//valueConstraints+=JcrString
		public Assignment getValueConstraintsAssignment_6_1_1_1() { return cValueConstraintsAssignment_6_1_1_1; }

		//JcrString
		public RuleCall getValueConstraintsJcrStringParserRuleCall_6_1_1_1_0() { return cValueConstraintsJcrStringParserRuleCall_6_1_1_1_0; }
	}

	public class NoQueryOrderElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "NoQueryOrder");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cNoqueryorderKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cNqordKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		
		//NoQueryOrder:
		//
		//	"noqueryorder" / * '?' //variant * / | "nqord";
		public ParserRule getRule() { return rule; }

		//"noqueryorder" / * '?' //variant * / | "nqord"
		public Alternatives getAlternatives() { return cAlternatives; }

		//"noqueryorder"
		public Keyword getNoqueryorderKeyword_0() { return cNoqueryorderKeyword_0; }

		//"nqord"
		public Keyword getNqordKeyword_1() { return cNqordKeyword_1; }
	}

	public class NoFullTextElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "NoFullText");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cNofulltextKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cNofKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		
		//NoFullText:
		//
		//	"nofulltext" / * '?' //variant * / | "nof";
		public ParserRule getRule() { return rule; }

		//"nofulltext" / * '?' //variant * / | "nof"
		public Alternatives getAlternatives() { return cAlternatives; }

		//"nofulltext"
		public Keyword getNofulltextKeyword_0() { return cNofulltextKeyword_0; }

		//"nof"
		public Keyword getNofKeyword_1() { return cNofKeyword_1; }
	}

	public class QueryOpsElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "QueryOps");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Alternatives cAlternatives_0 = (Alternatives)cGroup.eContents().get(0);
		private final Keyword cQueryopsKeyword_0_0 = (Keyword)cAlternatives_0.eContents().get(0);
		private final Keyword cQopKeyword_0_1 = (Keyword)cAlternatives_0.eContents().get(1);
		private final RuleCall cJcrStringParserRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		
		//QueryOps:
		//
		//	("queryops" | "qop") JcrString / *| '?' //variant * /;
		public ParserRule getRule() { return rule; }

		//("queryops" | "qop") JcrString / *| '?' //variant * /
		public Group getGroup() { return cGroup; }

		//"queryops" | "qop"
		public Alternatives getAlternatives_0() { return cAlternatives_0; }

		//"queryops"
		public Keyword getQueryopsKeyword_0_0() { return cQueryopsKeyword_0_0; }

		//"qop"
		public Keyword getQopKeyword_0_1() { return cQopKeyword_0_1; }

		//JcrString
		public RuleCall getJcrStringParserRuleCall_1() { return cJcrStringParserRuleCall_1; }
	}

	public class MultipleElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Multiple");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cMultipleKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cMulKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		private final Keyword cAsteriskKeyword_2 = (Keyword)cAlternatives.eContents().get(2);
		
		////TODO does not work. probably conflict with STRING terminal: 
		//
		////QueryOps:
		//
		////	(('queryops' | 'qop') "'" queryOperators+=Operator ("," queryOperators+=Operator)* "'" / * | '?' //variant  * /)? &
		//
		////;
		//
		////Operator:
		//
		////	'=' | '<>' | '<' | '<=' | '>' | '>=' | 'LIKE'
		//
		////;
		//
		//Multiple:
		//
		//	"multiple" / * '?' //variant * / | "mul" | "*";
		public ParserRule getRule() { return rule; }

		//"multiple" / * '?' //variant * / | "mul" | "*"
		public Alternatives getAlternatives() { return cAlternatives; }

		//"multiple"
		public Keyword getMultipleKeyword_0() { return cMultipleKeyword_0; }

		//"mul"
		public Keyword getMulKeyword_1() { return cMulKeyword_1; }

		//"*"
		public Keyword getAsteriskKeyword_2() { return cAsteriskKeyword_2; }
	}

	public class ProtectedElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Protected");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cProtectedKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cProKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		private final Keyword cPKeyword_2 = (Keyword)cAlternatives.eContents().get(2);
		
		//Protected:
		//
		//	"protected" / * '?' //variant * / | "pro" | "p";
		public ParserRule getRule() { return rule; }

		//"protected" / * '?' //variant * / | "pro" | "p"
		public Alternatives getAlternatives() { return cAlternatives; }

		//"protected"
		public Keyword getProtectedKeyword_0() { return cProtectedKeyword_0; }

		//"pro"
		public Keyword getProKeyword_1() { return cProKeyword_1; }

		//"p"
		public Keyword getPKeyword_2() { return cPKeyword_2; }
	}

	public class MandatoryElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Mandatory");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cMandatoryKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cManKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		private final Keyword cMKeyword_2 = (Keyword)cAlternatives.eContents().get(2);
		
		//Mandatory:
		//
		//	"mandatory" / * '?' //variant * / | "man" | "m";
		public ParserRule getRule() { return rule; }

		//"mandatory" / * '?' //variant * / | "man" | "m"
		public Alternatives getAlternatives() { return cAlternatives; }

		//"mandatory"
		public Keyword getMandatoryKeyword_0() { return cMandatoryKeyword_0; }

		//"man"
		public Keyword getManKeyword_1() { return cManKeyword_1; }

		//"m"
		public Keyword getMKeyword_2() { return cMKeyword_2; }
	}

	public class AutocreatedElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Autocreated");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cAutocreatedKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cAutKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		private final Keyword cAKeyword_2 = (Keyword)cAlternatives.eContents().get(2);
		
		//Autocreated:
		//
		//	"autocreated" / * '?' //variant * / | "aut" | "a";
		public ParserRule getRule() { return rule; }

		//"autocreated" / * '?' //variant * / | "aut" | "a"
		public Alternatives getAlternatives() { return cAlternatives; }

		//"autocreated"
		public Keyword getAutocreatedKeyword_0() { return cAutocreatedKeyword_0; }

		//"aut"
		public Keyword getAutKeyword_1() { return cAutKeyword_1; }

		//"a"
		public Keyword getAKeyword_2() { return cAKeyword_2; }
	}

	public class PrimaryElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Primary");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cPrimaryKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cExclamationMarkKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		
		//Primary:
		//
		//	"primary" //This attribute is not defined by JCR
		//
		//	/ * Jackrabbit feature. * / | "!";
		public ParserRule getRule() { return rule; }

		//"primary" //This attribute is not defined by JCR
		//
		/// * Jackrabbit feature. * / | "!"
		public Alternatives getAlternatives() { return cAlternatives; }

		//"primary"
		public Keyword getPrimaryKeyword_0() { return cPrimaryKeyword_0; }

		//"!"
		public Keyword getExclamationMarkKeyword_1() { return cExclamationMarkKeyword_1; }
	}

	public class PrimaryItemElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "PrimaryItem");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Alternatives cAlternatives_0 = (Alternatives)cGroup.eContents().get(0);
		private final Keyword cPrimaryitemKeyword_0_0 = (Keyword)cAlternatives_0.eContents().get(0);
		private final Keyword cExclamationMarkKeyword_0_1 = (Keyword)cAlternatives_0.eContents().get(1);
		private final RuleCall cJcrStringParserRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		
		//PrimaryItem:
		//
		//	("primaryitem" | "!") JcrString / * | '?' //variant * /;
		public ParserRule getRule() { return rule; }

		//("primaryitem" | "!") JcrString / * | '?' //variant * /
		public Group getGroup() { return cGroup; }

		//"primaryitem" | "!"
		public Alternatives getAlternatives_0() { return cAlternatives_0; }

		//"primaryitem"
		public Keyword getPrimaryitemKeyword_0_0() { return cPrimaryitemKeyword_0_0; }

		//"!"
		public Keyword getExclamationMarkKeyword_0_1() { return cExclamationMarkKeyword_0_1; }

		//JcrString
		public RuleCall getJcrStringParserRuleCall_1() { return cJcrStringParserRuleCall_1; }
	}

	public class QueryableElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Queryable");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cQueryKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cQKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		
		//Queryable:
		//
		//	"query" | "q";
		public ParserRule getRule() { return rule; }

		//"query" | "q"
		public Alternatives getAlternatives() { return cAlternatives; }

		//"query"
		public Keyword getQueryKeyword_0() { return cQueryKeyword_0; }

		//"q"
		public Keyword getQKeyword_1() { return cQKeyword_1; }
	}

	public class NotqueryableElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Notqueryable");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cNoqueryKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cNqKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		
		//Notqueryable:
		//
		//	"noquery" | "nq";
		public ParserRule getRule() { return rule; }

		//"noquery" | "nq"
		public Alternatives getAlternatives() { return cAlternatives; }

		//"noquery"
		public Keyword getNoqueryKeyword_0() { return cNoqueryKeyword_0; }

		//"nq"
		public Keyword getNqKeyword_1() { return cNqKeyword_1; }
	}

	public class AbstractElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Abstract");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cAbstractKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cAbsKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		private final Keyword cAKeyword_2 = (Keyword)cAlternatives.eContents().get(2);
		
		//Abstract:
		//
		//	"abstract" / * '?' //variant * / | "abs" | "a";
		public ParserRule getRule() { return rule; }

		//"abstract" / * '?' //variant * / | "abs" | "a"
		public Alternatives getAlternatives() { return cAlternatives; }

		//"abstract"
		public Keyword getAbstractKeyword_0() { return cAbstractKeyword_0; }

		//"abs"
		public Keyword getAbsKeyword_1() { return cAbsKeyword_1; }

		//"a"
		public Keyword getAKeyword_2() { return cAKeyword_2; }
	}

	public class MixinElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Mixin");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cMixinKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cMixKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		private final Keyword cMKeyword_2 = (Keyword)cAlternatives.eContents().get(2);
		
		//Mixin:
		//
		//	"mixin" / * '?' //variant * / | "mix" | "m";
		public ParserRule getRule() { return rule; }

		//"mixin" / * '?' //variant * / | "mix" | "m"
		public Alternatives getAlternatives() { return cAlternatives; }

		//"mixin"
		public Keyword getMixinKeyword_0() { return cMixinKeyword_0; }

		//"mix"
		public Keyword getMixKeyword_1() { return cMixKeyword_1; }

		//"m"
		public Keyword getMKeyword_2() { return cMKeyword_2; }
	}

	public class OrderableElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Orderable");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cOrderableKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cOrdKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		private final Keyword cOKeyword_2 = (Keyword)cAlternatives.eContents().get(2);
		
		//Orderable:
		//
		//	"orderable" / * '?' //variant * / | "ord" | "o";
		public ParserRule getRule() { return rule; }

		//"orderable" / * '?' //variant * / | "ord" | "o"
		public Alternatives getAlternatives() { return cAlternatives; }

		//"orderable"
		public Keyword getOrderableKeyword_0() { return cOrderableKeyword_0; }

		//"ord"
		public Keyword getOrdKeyword_1() { return cOrdKeyword_1; }

		//"o"
		public Keyword getOKeyword_2() { return cOKeyword_2; }
	}

	public class NsMappingElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "NsMapping");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLessThanSignKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNamePrefixParserRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cEqualsSignKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cUriAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cUriUriParserRuleCall_3_0 = (RuleCall)cUriAssignment_3.eContents().get(0);
		private final Keyword cGreaterThanSignKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//NsMapping:
		//
		//	"<" name=Prefix "=" uri=Uri ">";
		public ParserRule getRule() { return rule; }

		//"<" name=Prefix "=" uri=Uri ">"
		public Group getGroup() { return cGroup; }

		//"<"
		public Keyword getLessThanSignKeyword_0() { return cLessThanSignKeyword_0; }

		//name=Prefix
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//Prefix
		public RuleCall getNamePrefixParserRuleCall_1_0() { return cNamePrefixParserRuleCall_1_0; }

		//"="
		public Keyword getEqualsSignKeyword_2() { return cEqualsSignKeyword_2; }

		//uri=Uri
		public Assignment getUriAssignment_3() { return cUriAssignment_3; }

		//Uri
		public RuleCall getUriUriParserRuleCall_3_0() { return cUriUriParserRuleCall_3_0; }

		//">"
		public Keyword getGreaterThanSignKeyword_4() { return cGreaterThanSignKeyword_4; }
	}

	public class PrefixElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Prefix");
		private final RuleCall cXiDParserRuleCall = (RuleCall)rule.eContents().get(1);
		
		//Prefix:
		//
		//	XiD;
		public ParserRule getRule() { return rule; }

		//XiD
		public RuleCall getXiDParserRuleCall() { return cXiDParserRuleCall; }
	}

	public class UriElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Uri");
		private final RuleCall cJcrStringParserRuleCall = (RuleCall)rule.eContents().get(1);
		
		//Uri:
		//
		//	JcrString;
		public ParserRule getRule() { return rule; }

		//JcrString
		public RuleCall getJcrStringParserRuleCall() { return cJcrStringParserRuleCall; }
	}

	public class JcrStringElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "JcrString");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cSTRINGTerminalRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cXiDParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//JcrString:
		//
		//	STRING | XiD;
		public ParserRule getRule() { return rule; }

		//STRING | XiD
		public Alternatives getAlternatives() { return cAlternatives; }

		//STRING
		public RuleCall getSTRINGTerminalRuleCall_0() { return cSTRINGTerminalRuleCall_0; }

		//XiD
		public RuleCall getXiDParserRuleCall_1() { return cXiDParserRuleCall_1; }
	}

	public class XiDElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "XiD");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cEXIDTerminalRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final Keyword cMixKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		
		//XiD:
		//
		//	EXID | "mix";
		public ParserRule getRule() { return rule; }

		//EXID | "mix"
		public Alternatives getAlternatives() { return cAlternatives; }

		//EXID
		public RuleCall getEXIDTerminalRuleCall_0() { return cEXIDTerminalRuleCall_0; }

		//"mix"
		public Keyword getMixKeyword_1() { return cMixKeyword_1; }
	}
	
	
	public class OpvElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "Opv");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cCOPYEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cCOPYCOPYKeyword_0_0 = (Keyword)cCOPYEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cVERSIONEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cVERSIONVERSIONKeyword_1_0 = (Keyword)cVERSIONEnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cINITIALIZEEnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cINITIALIZEINITIALIZEKeyword_2_0 = (Keyword)cINITIALIZEEnumLiteralDeclaration_2.eContents().get(0);
		private final EnumLiteralDeclaration cCOMPUTEEnumLiteralDeclaration_3 = (EnumLiteralDeclaration)cAlternatives.eContents().get(3);
		private final Keyword cCOMPUTECOMPUTEKeyword_3_0 = (Keyword)cCOMPUTEEnumLiteralDeclaration_3.eContents().get(0);
		private final EnumLiteralDeclaration cIGNOREEnumLiteralDeclaration_4 = (EnumLiteralDeclaration)cAlternatives.eContents().get(4);
		private final Keyword cIGNOREIGNOREKeyword_4_0 = (Keyword)cIGNOREEnumLiteralDeclaration_4.eContents().get(0);
		private final EnumLiteralDeclaration cABORTEnumLiteralDeclaration_5 = (EnumLiteralDeclaration)cAlternatives.eContents().get(5);
		private final Keyword cABORTABORTKeyword_5_0 = (Keyword)cABORTEnumLiteralDeclaration_5.eContents().get(0);
		
		////| ('OPV' '?') //variant
		//
		//enum Opv:
		//
		//	COPY | VERSION | INITIALIZE | COMPUTE | IGNORE | ABORT;
		public EnumRule getRule() { return rule; }

		//COPY | VERSION | INITIALIZE | COMPUTE | IGNORE | ABORT
		public Alternatives getAlternatives() { return cAlternatives; }

		//COPY
		public EnumLiteralDeclaration getCOPYEnumLiteralDeclaration_0() { return cCOPYEnumLiteralDeclaration_0; }

		//"COPY"
		public Keyword getCOPYCOPYKeyword_0_0() { return cCOPYCOPYKeyword_0_0; }

		//VERSION
		public EnumLiteralDeclaration getVERSIONEnumLiteralDeclaration_1() { return cVERSIONEnumLiteralDeclaration_1; }

		//"VERSION"
		public Keyword getVERSIONVERSIONKeyword_1_0() { return cVERSIONVERSIONKeyword_1_0; }

		//INITIALIZE
		public EnumLiteralDeclaration getINITIALIZEEnumLiteralDeclaration_2() { return cINITIALIZEEnumLiteralDeclaration_2; }

		//"INITIALIZE"
		public Keyword getINITIALIZEINITIALIZEKeyword_2_0() { return cINITIALIZEINITIALIZEKeyword_2_0; }

		//COMPUTE
		public EnumLiteralDeclaration getCOMPUTEEnumLiteralDeclaration_3() { return cCOMPUTEEnumLiteralDeclaration_3; }

		//"COMPUTE"
		public Keyword getCOMPUTECOMPUTEKeyword_3_0() { return cCOMPUTECOMPUTEKeyword_3_0; }

		//IGNORE
		public EnumLiteralDeclaration getIGNOREEnumLiteralDeclaration_4() { return cIGNOREEnumLiteralDeclaration_4; }

		//"IGNORE"
		public Keyword getIGNOREIGNOREKeyword_4_0() { return cIGNOREIGNOREKeyword_4_0; }

		//ABORT
		public EnumLiteralDeclaration getABORTEnumLiteralDeclaration_5() { return cABORTEnumLiteralDeclaration_5; }

		//"ABORT"
		public Keyword getABORTABORTKeyword_5_0() { return cABORTABORTKeyword_5_0; }
	}

	public class PropertyTypeElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "PropertyType");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cUNDEFINEDEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cUNDEFINEDUNDEFINEDKeyword_0_0 = (Keyword)cUNDEFINEDEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cTSTRINGEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cTSTRINGSTRINGKeyword_1_0 = (Keyword)cTSTRINGEnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cTBINARYEnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cTBINARYBINARYKeyword_2_0 = (Keyword)cTBINARYEnumLiteralDeclaration_2.eContents().get(0);
		private final EnumLiteralDeclaration cTLONGEnumLiteralDeclaration_3 = (EnumLiteralDeclaration)cAlternatives.eContents().get(3);
		private final Keyword cTLONGLONGKeyword_3_0 = (Keyword)cTLONGEnumLiteralDeclaration_3.eContents().get(0);
		private final EnumLiteralDeclaration cTDOUBLEEnumLiteralDeclaration_4 = (EnumLiteralDeclaration)cAlternatives.eContents().get(4);
		private final Keyword cTDOUBLEDOUBLEKeyword_4_0 = (Keyword)cTDOUBLEEnumLiteralDeclaration_4.eContents().get(0);
		private final EnumLiteralDeclaration cDDATEEnumLiteralDeclaration_5 = (EnumLiteralDeclaration)cAlternatives.eContents().get(5);
		private final Keyword cDDATEDATEKeyword_5_0 = (Keyword)cDDATEEnumLiteralDeclaration_5.eContents().get(0);
		private final EnumLiteralDeclaration cTBOOLEANEnumLiteralDeclaration_6 = (EnumLiteralDeclaration)cAlternatives.eContents().get(6);
		private final Keyword cTBOOLEANBOOLEANKeyword_6_0 = (Keyword)cTBOOLEANEnumLiteralDeclaration_6.eContents().get(0);
		private final EnumLiteralDeclaration cTNAMEEnumLiteralDeclaration_7 = (EnumLiteralDeclaration)cAlternatives.eContents().get(7);
		private final Keyword cTNAMENAMEKeyword_7_0 = (Keyword)cTNAMEEnumLiteralDeclaration_7.eContents().get(0);
		private final EnumLiteralDeclaration cTPATHEnumLiteralDeclaration_8 = (EnumLiteralDeclaration)cAlternatives.eContents().get(8);
		private final Keyword cTPATHPATHKeyword_8_0 = (Keyword)cTPATHEnumLiteralDeclaration_8.eContents().get(0);
		private final EnumLiteralDeclaration cTREFERENCEEnumLiteralDeclaration_9 = (EnumLiteralDeclaration)cAlternatives.eContents().get(9);
		private final Keyword cTREFERENCEREFERENCEKeyword_9_0 = (Keyword)cTREFERENCEEnumLiteralDeclaration_9.eContents().get(0);
		private final EnumLiteralDeclaration cTWEAKREFERENCEEnumLiteralDeclaration_10 = (EnumLiteralDeclaration)cAlternatives.eContents().get(10);
		private final Keyword cTWEAKREFERENCEWEAKREFERENCEKeyword_10_0 = (Keyword)cTWEAKREFERENCEEnumLiteralDeclaration_10.eContents().get(0);
		private final EnumLiteralDeclaration cTURIEnumLiteralDeclaration_11 = (EnumLiteralDeclaration)cAlternatives.eContents().get(11);
		private final Keyword cTURIURIKeyword_11_0 = (Keyword)cTURIEnumLiteralDeclaration_11.eContents().get(0);
		private final EnumLiteralDeclaration cTDECIMALEnumLiteralDeclaration_12 = (EnumLiteralDeclaration)cAlternatives.eContents().get(12);
		private final Keyword cTDECIMALDECIMALKeyword_12_0 = (Keyword)cTDECIMALEnumLiteralDeclaration_12.eContents().get(0);
		
		/// *
		//
		// *  The order of the enum elements is important. 
		//
		// *  It defines same ordinal as in javax.jcr.PropertyType
		//
		// *  Do not change the order!  
		//
		// * / //| '?' / * variant * /	  
		//
		//enum PropertyType:
		//
		//	UNDEFINED | TSTRING="STRING" | TBINARY="BINARY" | TLONG="LONG" | TDOUBLE="DOUBLE" | DDATE="DATE" | TBOOLEAN="BOOLEAN"
		//
		//	| TNAME="NAME" | TPATH="PATH" | TREFERENCE="REFERENCE" | TWEAKREFERENCE="WEAKREFERENCE" | TURI="URI" |
		//
		//	TDECIMAL="DECIMAL";
		public EnumRule getRule() { return rule; }

		//UNDEFINED | TSTRING="STRING" | TBINARY="BINARY" | TLONG="LONG" | TDOUBLE="DOUBLE" | DDATE="DATE" | TBOOLEAN="BOOLEAN" |
		//
		//TNAME="NAME" | TPATH="PATH" | TREFERENCE="REFERENCE" | TWEAKREFERENCE="WEAKREFERENCE" | TURI="URI" |
		//
		//TDECIMAL="DECIMAL"
		public Alternatives getAlternatives() { return cAlternatives; }

		//UNDEFINED
		public EnumLiteralDeclaration getUNDEFINEDEnumLiteralDeclaration_0() { return cUNDEFINEDEnumLiteralDeclaration_0; }

		//"UNDEFINED"
		public Keyword getUNDEFINEDUNDEFINEDKeyword_0_0() { return cUNDEFINEDUNDEFINEDKeyword_0_0; }

		//TSTRING="STRING"
		public EnumLiteralDeclaration getTSTRINGEnumLiteralDeclaration_1() { return cTSTRINGEnumLiteralDeclaration_1; }

		//"STRING"
		public Keyword getTSTRINGSTRINGKeyword_1_0() { return cTSTRINGSTRINGKeyword_1_0; }

		//TBINARY="BINARY"
		public EnumLiteralDeclaration getTBINARYEnumLiteralDeclaration_2() { return cTBINARYEnumLiteralDeclaration_2; }

		//"BINARY"
		public Keyword getTBINARYBINARYKeyword_2_0() { return cTBINARYBINARYKeyword_2_0; }

		//TLONG="LONG"
		public EnumLiteralDeclaration getTLONGEnumLiteralDeclaration_3() { return cTLONGEnumLiteralDeclaration_3; }

		//"LONG"
		public Keyword getTLONGLONGKeyword_3_0() { return cTLONGLONGKeyword_3_0; }

		//TDOUBLE="DOUBLE"
		public EnumLiteralDeclaration getTDOUBLEEnumLiteralDeclaration_4() { return cTDOUBLEEnumLiteralDeclaration_4; }

		//"DOUBLE"
		public Keyword getTDOUBLEDOUBLEKeyword_4_0() { return cTDOUBLEDOUBLEKeyword_4_0; }

		//DDATE="DATE"
		public EnumLiteralDeclaration getDDATEEnumLiteralDeclaration_5() { return cDDATEEnumLiteralDeclaration_5; }

		//"DATE"
		public Keyword getDDATEDATEKeyword_5_0() { return cDDATEDATEKeyword_5_0; }

		//TBOOLEAN="BOOLEAN"
		public EnumLiteralDeclaration getTBOOLEANEnumLiteralDeclaration_6() { return cTBOOLEANEnumLiteralDeclaration_6; }

		//"BOOLEAN"
		public Keyword getTBOOLEANBOOLEANKeyword_6_0() { return cTBOOLEANBOOLEANKeyword_6_0; }

		//TNAME="NAME"
		public EnumLiteralDeclaration getTNAMEEnumLiteralDeclaration_7() { return cTNAMEEnumLiteralDeclaration_7; }

		//"NAME"
		public Keyword getTNAMENAMEKeyword_7_0() { return cTNAMENAMEKeyword_7_0; }

		//TPATH="PATH"
		public EnumLiteralDeclaration getTPATHEnumLiteralDeclaration_8() { return cTPATHEnumLiteralDeclaration_8; }

		//"PATH"
		public Keyword getTPATHPATHKeyword_8_0() { return cTPATHPATHKeyword_8_0; }

		//TREFERENCE="REFERENCE"
		public EnumLiteralDeclaration getTREFERENCEEnumLiteralDeclaration_9() { return cTREFERENCEEnumLiteralDeclaration_9; }

		//"REFERENCE"
		public Keyword getTREFERENCEREFERENCEKeyword_9_0() { return cTREFERENCEREFERENCEKeyword_9_0; }

		//TWEAKREFERENCE="WEAKREFERENCE"
		public EnumLiteralDeclaration getTWEAKREFERENCEEnumLiteralDeclaration_10() { return cTWEAKREFERENCEEnumLiteralDeclaration_10; }

		//"WEAKREFERENCE"
		public Keyword getTWEAKREFERENCEWEAKREFERENCEKeyword_10_0() { return cTWEAKREFERENCEWEAKREFERENCEKeyword_10_0; }

		//TURI="URI"
		public EnumLiteralDeclaration getTURIEnumLiteralDeclaration_11() { return cTURIEnumLiteralDeclaration_11; }

		//"URI"
		public Keyword getTURIURIKeyword_11_0() { return cTURIURIKeyword_11_0; }

		//TDECIMAL="DECIMAL"
		public EnumLiteralDeclaration getTDECIMALEnumLiteralDeclaration_12() { return cTDECIMALEnumLiteralDeclaration_12; }

		//"DECIMAL"
		public Keyword getTDECIMALDECIMALKeyword_12_0() { return cTDECIMALDECIMALKeyword_12_0; }
	}
	
	private ModelElements pModel;
	private NodeTypeDefinitionElements pNodeTypeDefinition;
	private NodeDefinitionElements pNodeDefinition;
	private SnsElements pSns;
	private PropertyDefinitionElements pPropertyDefinition;
	private NoQueryOrderElements pNoQueryOrder;
	private NoFullTextElements pNoFullText;
	private QueryOpsElements pQueryOps;
	private MultipleElements pMultiple;
	private OpvElements unknownRuleOpv;
	private ProtectedElements pProtected;
	private MandatoryElements pMandatory;
	private AutocreatedElements pAutocreated;
	private PrimaryElements pPrimary;
	private PropertyTypeElements unknownRulePropertyType;
	private PrimaryItemElements pPrimaryItem;
	private QueryableElements pQueryable;
	private NotqueryableElements pNotqueryable;
	private AbstractElements pAbstract;
	private MixinElements pMixin;
	private OrderableElements pOrderable;
	private NsMappingElements pNsMapping;
	private PrefixElements pPrefix;
	private UriElements pUri;
	private JcrStringElements pJcrString;
	private XiDElements pXiD;
	private TerminalRule tEXID;
	
	private final Grammar grammar;

	private TerminalsGrammarAccess gaTerminals;

	@Inject
	public CndGrammarAccess(GrammarProvider grammarProvider,
		TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("com.github.evra.jcr.Cnd".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	
	public Grammar getGrammar() {
		return grammar;
	}
	

	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	////!! http://www.eclipse.org/forums/index.php/t/489632/
	//
	//Model:
	//
	//	(namespaces+=NsMapping | nodeTypes+=NodeTypeDefinition)*;
	public ModelElements getModelAccess() {
		return (pModel != null) ? pModel : (pModel = new ModelElements());
	}
	
	public ParserRule getModelRule() {
		return getModelAccess().getRule();
	}

	//NodeTypeDefinition:
	//
	//	"[" name=JcrString "]" (">" declaredSupertypeNames+=JcrString ("," declaredSupertypeNames+=JcrString)*
	//
	//	/ *|'?' //variant  * /)? (orderable?=Orderable? //TODO find a way to map query flags on one field
	//
	//	& mixin?=Mixin? & abstract?=Abstract? & queryable?=Queryable? & notqueryable?=Notqueryable? & primaryItem=PrimaryItem?)
	//
	//	(declaredPropertyDefinitions+=PropertyDefinition | declaredChildNodeDefinitions+=NodeDefinition)*;
	public NodeTypeDefinitionElements getNodeTypeDefinitionAccess() {
		return (pNodeTypeDefinition != null) ? pNodeTypeDefinition : (pNodeTypeDefinition = new NodeTypeDefinitionElements());
	}
	
	public ParserRule getNodeTypeDefinitionRule() {
		return getNodeTypeDefinitionAccess().getRule();
	}

	//NodeDefinition:
	//
	//	"+" (name=JcrString / *Jackrabbit feature * / //TODO check if it is used in Jackrabbit examples
	//
	//	| name="*") ("(" (requiredTypes+=JcrString ("," requiredTypes+=JcrString)*) / *| '?' //variant  * / ")")? ("="
	//
	//	defaultType=JcrString / *| '?' //variant  * /)? (autocreated?=Autocreated? & manadatory?=Mandatory? &
	//
	//	protected?=Protected? & onParentVersion=Opv? & sameNameSiblings?=Sns?);
	public NodeDefinitionElements getNodeDefinitionAccess() {
		return (pNodeDefinition != null) ? pNodeDefinition : (pNodeDefinition = new NodeDefinitionElements());
	}
	
	public ParserRule getNodeDefinitionRule() {
		return getNodeDefinitionAccess().getRule();
	}

	//Sns:
	//
	//	"sns" / * Jackrabbit feature* / / * '?' //variant * / | "*" | "multiple";
	public SnsElements getSnsAccess() {
		return (pSns != null) ? pSns : (pSns = new SnsElements());
	}
	
	public ParserRule getSnsRule() {
		return getSnsAccess().getRule();
	}

	//PropertyDefinition: //force creation
	//
	//	{PropertyDefinition} "-" (name=JcrString / *Jackrabbit feature * / | "*") ("(" type=PropertyType ")")? ("="
	//
	//	(defaultValues+=JcrString ("," defaultValues+=JcrString)*) / * | '?' //variant * /)? (autocreated?=Autocreated? &
	//
	//	mandatory?=Mandatory? & protected?=Protected? & onParentVersion=Opv? & multiple?=Multiple? & queryOps=QueryOps? &
	//
	//	noFullText?=NoFullText? & noQueryOrder?=NoQueryOrder? & primary?=Primary?) ("<" (valueConstraints+=JcrString (","
	//
	//	valueConstraints+=JcrString)*) / * | '?' //variant * /)?;
	public PropertyDefinitionElements getPropertyDefinitionAccess() {
		return (pPropertyDefinition != null) ? pPropertyDefinition : (pPropertyDefinition = new PropertyDefinitionElements());
	}
	
	public ParserRule getPropertyDefinitionRule() {
		return getPropertyDefinitionAccess().getRule();
	}

	//NoQueryOrder:
	//
	//	"noqueryorder" / * '?' //variant * / | "nqord";
	public NoQueryOrderElements getNoQueryOrderAccess() {
		return (pNoQueryOrder != null) ? pNoQueryOrder : (pNoQueryOrder = new NoQueryOrderElements());
	}
	
	public ParserRule getNoQueryOrderRule() {
		return getNoQueryOrderAccess().getRule();
	}

	//NoFullText:
	//
	//	"nofulltext" / * '?' //variant * / | "nof";
	public NoFullTextElements getNoFullTextAccess() {
		return (pNoFullText != null) ? pNoFullText : (pNoFullText = new NoFullTextElements());
	}
	
	public ParserRule getNoFullTextRule() {
		return getNoFullTextAccess().getRule();
	}

	//QueryOps:
	//
	//	("queryops" | "qop") JcrString / *| '?' //variant * /;
	public QueryOpsElements getQueryOpsAccess() {
		return (pQueryOps != null) ? pQueryOps : (pQueryOps = new QueryOpsElements());
	}
	
	public ParserRule getQueryOpsRule() {
		return getQueryOpsAccess().getRule();
	}

	////TODO does not work. probably conflict with STRING terminal: 
	//
	////QueryOps:
	//
	////	(('queryops' | 'qop') "'" queryOperators+=Operator ("," queryOperators+=Operator)* "'" / * | '?' //variant  * /)? &
	//
	////;
	//
	////Operator:
	//
	////	'=' | '<>' | '<' | '<=' | '>' | '>=' | 'LIKE'
	//
	////;
	//
	//Multiple:
	//
	//	"multiple" / * '?' //variant * / | "mul" | "*";
	public MultipleElements getMultipleAccess() {
		return (pMultiple != null) ? pMultiple : (pMultiple = new MultipleElements());
	}
	
	public ParserRule getMultipleRule() {
		return getMultipleAccess().getRule();
	}

	////| ('OPV' '?') //variant
	//
	//enum Opv:
	//
	//	COPY | VERSION | INITIALIZE | COMPUTE | IGNORE | ABORT;
	public OpvElements getOpvAccess() {
		return (unknownRuleOpv != null) ? unknownRuleOpv : (unknownRuleOpv = new OpvElements());
	}
	
	public EnumRule getOpvRule() {
		return getOpvAccess().getRule();
	}

	//Protected:
	//
	//	"protected" / * '?' //variant * / | "pro" | "p";
	public ProtectedElements getProtectedAccess() {
		return (pProtected != null) ? pProtected : (pProtected = new ProtectedElements());
	}
	
	public ParserRule getProtectedRule() {
		return getProtectedAccess().getRule();
	}

	//Mandatory:
	//
	//	"mandatory" / * '?' //variant * / | "man" | "m";
	public MandatoryElements getMandatoryAccess() {
		return (pMandatory != null) ? pMandatory : (pMandatory = new MandatoryElements());
	}
	
	public ParserRule getMandatoryRule() {
		return getMandatoryAccess().getRule();
	}

	//Autocreated:
	//
	//	"autocreated" / * '?' //variant * / | "aut" | "a";
	public AutocreatedElements getAutocreatedAccess() {
		return (pAutocreated != null) ? pAutocreated : (pAutocreated = new AutocreatedElements());
	}
	
	public ParserRule getAutocreatedRule() {
		return getAutocreatedAccess().getRule();
	}

	//Primary:
	//
	//	"primary" //This attribute is not defined by JCR
	//
	//	/ * Jackrabbit feature. * / | "!";
	public PrimaryElements getPrimaryAccess() {
		return (pPrimary != null) ? pPrimary : (pPrimary = new PrimaryElements());
	}
	
	public ParserRule getPrimaryRule() {
		return getPrimaryAccess().getRule();
	}

	/// *
	//
	// *  The order of the enum elements is important. 
	//
	// *  It defines same ordinal as in javax.jcr.PropertyType
	//
	// *  Do not change the order!  
	//
	// * / //| '?' / * variant * /	  
	//
	//enum PropertyType:
	//
	//	UNDEFINED | TSTRING="STRING" | TBINARY="BINARY" | TLONG="LONG" | TDOUBLE="DOUBLE" | DDATE="DATE" | TBOOLEAN="BOOLEAN"
	//
	//	| TNAME="NAME" | TPATH="PATH" | TREFERENCE="REFERENCE" | TWEAKREFERENCE="WEAKREFERENCE" | TURI="URI" |
	//
	//	TDECIMAL="DECIMAL";
	public PropertyTypeElements getPropertyTypeAccess() {
		return (unknownRulePropertyType != null) ? unknownRulePropertyType : (unknownRulePropertyType = new PropertyTypeElements());
	}
	
	public EnumRule getPropertyTypeRule() {
		return getPropertyTypeAccess().getRule();
	}

	//PrimaryItem:
	//
	//	("primaryitem" | "!") JcrString / * | '?' //variant * /;
	public PrimaryItemElements getPrimaryItemAccess() {
		return (pPrimaryItem != null) ? pPrimaryItem : (pPrimaryItem = new PrimaryItemElements());
	}
	
	public ParserRule getPrimaryItemRule() {
		return getPrimaryItemAccess().getRule();
	}

	//Queryable:
	//
	//	"query" | "q";
	public QueryableElements getQueryableAccess() {
		return (pQueryable != null) ? pQueryable : (pQueryable = new QueryableElements());
	}
	
	public ParserRule getQueryableRule() {
		return getQueryableAccess().getRule();
	}

	//Notqueryable:
	//
	//	"noquery" | "nq";
	public NotqueryableElements getNotqueryableAccess() {
		return (pNotqueryable != null) ? pNotqueryable : (pNotqueryable = new NotqueryableElements());
	}
	
	public ParserRule getNotqueryableRule() {
		return getNotqueryableAccess().getRule();
	}

	//Abstract:
	//
	//	"abstract" / * '?' //variant * / | "abs" | "a";
	public AbstractElements getAbstractAccess() {
		return (pAbstract != null) ? pAbstract : (pAbstract = new AbstractElements());
	}
	
	public ParserRule getAbstractRule() {
		return getAbstractAccess().getRule();
	}

	//Mixin:
	//
	//	"mixin" / * '?' //variant * / | "mix" | "m";
	public MixinElements getMixinAccess() {
		return (pMixin != null) ? pMixin : (pMixin = new MixinElements());
	}
	
	public ParserRule getMixinRule() {
		return getMixinAccess().getRule();
	}

	//Orderable:
	//
	//	"orderable" / * '?' //variant * / | "ord" | "o";
	public OrderableElements getOrderableAccess() {
		return (pOrderable != null) ? pOrderable : (pOrderable = new OrderableElements());
	}
	
	public ParserRule getOrderableRule() {
		return getOrderableAccess().getRule();
	}

	//NsMapping:
	//
	//	"<" name=Prefix "=" uri=Uri ">";
	public NsMappingElements getNsMappingAccess() {
		return (pNsMapping != null) ? pNsMapping : (pNsMapping = new NsMappingElements());
	}
	
	public ParserRule getNsMappingRule() {
		return getNsMappingAccess().getRule();
	}

	//Prefix:
	//
	//	XiD;
	public PrefixElements getPrefixAccess() {
		return (pPrefix != null) ? pPrefix : (pPrefix = new PrefixElements());
	}
	
	public ParserRule getPrefixRule() {
		return getPrefixAccess().getRule();
	}

	//Uri:
	//
	//	JcrString;
	public UriElements getUriAccess() {
		return (pUri != null) ? pUri : (pUri = new UriElements());
	}
	
	public ParserRule getUriRule() {
		return getUriAccess().getRule();
	}

	//JcrString:
	//
	//	STRING | XiD;
	public JcrStringElements getJcrStringAccess() {
		return (pJcrString != null) ? pJcrString : (pJcrString = new JcrStringElements());
	}
	
	public ParserRule getJcrStringRule() {
		return getJcrStringAccess().getRule();
	}

	//XiD:
	//
	//	EXID | "mix";
	public XiDElements getXiDAccess() {
		return (pXiD != null) ? pXiD : (pXiD = new XiDElements());
	}
	
	public ParserRule getXiDRule() {
		return getXiDAccess().getRule();
	}

	////jcr_string:
	//
	////	quoted_string|UNQUOTED_STRING		
	//
	////;
	//
	////quoted_string:
	//
	////	"'" UNQUOTED_STRING "'"
	//
	////;
	//
	////TODO 
	//
	////According to JCR2.0 string terminal must follow XML char definition  / * see §3.2.2 Local Names * /
	//
	////terminal NAMESPACE_PREFIX : 
	//
	////	ID
	//
	////;
	//
	////terminal STRING	: 
	//
	////			'"' ( '\\' ('b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\') | !('\\'|'"') )* '"' |
	//
	////			"'" ( '\\' ('b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\') | !('\\'|"'") )* "'" 
	//
	////			|(!('\\'|"'"|'"') )+
	//
	////		; 
	//
	////terminal NAMESPACE_PREFIX : ('A'..'Z'|'a'..'z'|'0'..'9'|'_')+;
	//
	////terminal UNQUOTED_STRING : (XML_CHAR)+;
	//
	////terminal fragment XML_CHAR : ('\u0022'..'\u007E');
	//
	////terminal ML_COMMENT	: '/ *' -> '* /';
	//
	////terminal SL_COMMENT 	: '//' !('\n'|'\r')* ('\r'? '\n')?;
	//
	////
	//
	////terminal WS			: (' '|'\t'|'\r'|'\n')+;
	//
	//terminal EXID:
	//
	//	("a".."z" | "A".."Z" | "_") ("a".."z" | "A".."Z" | "_" | "0".."9" | ":" | "*")*;
	public TerminalRule getEXIDRule() {
		return (tEXID != null) ? tEXID : (tEXID = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "EXID"));
	} 

	//terminal ID:
	//
	//	"^"? ("a".."z" | "A".."Z" | "_") ("a".."z" | "A".."Z" | "_" | "0".."9")*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	} 

	//terminal INT returns ecore::EInt:
	//
	//	"0".."9"+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	} 

	//terminal STRING:
	//
	//	"\"" ("\\" ("b" | "t" | "n" | "f" | "r" | "u" | "\"" | "\'" | "\\") | !("\\" | "\""))* "\"" | "\'" ("\\" ("b" | "t" |
	//
	//	"n" | "f" | "r" | "u" | "\"" | "\'" | "\\") | !("\\" | "\'"))* "\'";
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	} 

	//terminal ML_COMMENT:
	//
	//	"/ *"->"* /";
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	} 

	//terminal SL_COMMENT:
	//
	//	"//" !("\n" | "\r")* ("\r"? "\n")?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	} 

	//terminal WS:
	//
	//	(" " | "\t" | "\r" | "\n")+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	} 

	//terminal ANY_OTHER:
	//
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	} 
}
