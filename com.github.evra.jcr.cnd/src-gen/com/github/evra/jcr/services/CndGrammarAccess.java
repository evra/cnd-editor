/*
* generated by Xtext
*/
package com.github.evra.jcr.services;

import com.google.inject.Singleton;
import com.google.inject.Inject;

import java.util.List;

import org.eclipse.xtext.*;
import org.eclipse.xtext.service.GrammarProvider;
import org.eclipse.xtext.service.AbstractElementFinder.*;

import org.eclipse.xtext.common.services.TerminalsGrammarAccess;

@Singleton
public class CndGrammarAccess extends AbstractGrammarElementFinder {
	
	
	public class ModelElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Model");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Assignment cMappingsAssignment_0 = (Assignment)cAlternatives.eContents().get(0);
		private final RuleCall cMappingsNsMappingParserRuleCall_0_0 = (RuleCall)cMappingsAssignment_0.eContents().get(0);
		private final Assignment cNodetypesAssignment_1 = (Assignment)cAlternatives.eContents().get(1);
		private final RuleCall cNodetypesNodeTypeDefParserRuleCall_1_0 = (RuleCall)cNodetypesAssignment_1.eContents().get(0);
		
		////!! http://www.eclipse.org/forums/index.php/t/489632/
		//
		//Model:
		//
		//	(mappings+=NsMapping | nodetypes+=NodeTypeDef)*;
		public ParserRule getRule() { return rule; }

		//(mappings+=NsMapping | nodetypes+=NodeTypeDef)*
		public Alternatives getAlternatives() { return cAlternatives; }

		//mappings+=NsMapping
		public Assignment getMappingsAssignment_0() { return cMappingsAssignment_0; }

		//NsMapping
		public RuleCall getMappingsNsMappingParserRuleCall_0_0() { return cMappingsNsMappingParserRuleCall_0_0; }

		//nodetypes+=NodeTypeDef
		public Assignment getNodetypesAssignment_1() { return cNodetypesAssignment_1; }

		//NodeTypeDef
		public RuleCall getNodetypesNodeTypeDefParserRuleCall_1_0() { return cNodetypesNodeTypeDefParserRuleCall_1_0; }
	}

	public class NodeTypeDefElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "NodeTypeDef");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cNodeTypeNameParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final RuleCall cSuperTypesParserRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		private final Assignment cAttributesAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cAttributesNodeTypeAttributeParserRuleCall_2_0 = (RuleCall)cAttributesAssignment_2.eContents().get(0);
		private final Alternatives cAlternatives_3 = (Alternatives)cGroup.eContents().get(3);
		private final RuleCall cPropertyDefParserRuleCall_3_0 = (RuleCall)cAlternatives_3.eContents().get(0);
		private final RuleCall cChildNodeDefParserRuleCall_3_1 = (RuleCall)cAlternatives_3.eContents().get(1);
		
		//NodeTypeDef:
		//
		//	NodeTypeName SuperTypes? attributes+=NodeTypeAttribute* (PropertyDef | ChildNodeDef)*;
		public ParserRule getRule() { return rule; }

		//NodeTypeName SuperTypes? attributes+=NodeTypeAttribute* (PropertyDef | ChildNodeDef)*
		public Group getGroup() { return cGroup; }

		//NodeTypeName
		public RuleCall getNodeTypeNameParserRuleCall_0() { return cNodeTypeNameParserRuleCall_0; }

		//SuperTypes?
		public RuleCall getSuperTypesParserRuleCall_1() { return cSuperTypesParserRuleCall_1; }

		//attributes+=NodeTypeAttribute*
		public Assignment getAttributesAssignment_2() { return cAttributesAssignment_2; }

		//NodeTypeAttribute
		public RuleCall getAttributesNodeTypeAttributeParserRuleCall_2_0() { return cAttributesNodeTypeAttributeParserRuleCall_2_0; }

		//(PropertyDef | ChildNodeDef)*
		public Alternatives getAlternatives_3() { return cAlternatives_3; }

		//PropertyDef
		public RuleCall getPropertyDefParserRuleCall_3_0() { return cPropertyDefParserRuleCall_3_0; }

		//ChildNodeDef
		public RuleCall getChildNodeDefParserRuleCall_3_1() { return cChildNodeDefParserRuleCall_3_1; }
	}

	public class ChildNodeDefElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ChildNodeDef");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cNodeNameParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final RuleCall cRequiredTypesParserRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		private final RuleCall cDefaultTypeParserRuleCall_2 = (RuleCall)cGroup.eContents().get(2);
		private final RuleCall cNodeAttributeParserRuleCall_3 = (RuleCall)cGroup.eContents().get(3);
		
		//ChildNodeDef:
		//
		//	NodeName RequiredTypes? DefaultType? NodeAttribute*;
		public ParserRule getRule() { return rule; }

		//NodeName RequiredTypes? DefaultType? NodeAttribute*
		public Group getGroup() { return cGroup; }

		//NodeName
		public RuleCall getNodeNameParserRuleCall_0() { return cNodeNameParserRuleCall_0; }

		//RequiredTypes?
		public RuleCall getRequiredTypesParserRuleCall_1() { return cRequiredTypesParserRuleCall_1; }

		//DefaultType?
		public RuleCall getDefaultTypeParserRuleCall_2() { return cDefaultTypeParserRuleCall_2; }

		//NodeAttribute*
		public RuleCall getNodeAttributeParserRuleCall_3() { return cNodeAttributeParserRuleCall_3; }
	}

	public class NodeAttributeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "NodeAttribute");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cAutocreatedParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cMandatoryParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cProtectedParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cOpvParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cSnsParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		
		//NodeAttribute:
		//
		//	Autocreated | Mandatory | Protected | Opv | Sns;
		public ParserRule getRule() { return rule; }

		//Autocreated | Mandatory | Protected | Opv | Sns
		public Alternatives getAlternatives() { return cAlternatives; }

		//Autocreated
		public RuleCall getAutocreatedParserRuleCall_0() { return cAutocreatedParserRuleCall_0; }

		//Mandatory
		public RuleCall getMandatoryParserRuleCall_1() { return cMandatoryParserRuleCall_1; }

		//Protected
		public RuleCall getProtectedParserRuleCall_2() { return cProtectedParserRuleCall_2; }

		//Opv
		public RuleCall getOpvParserRuleCall_3() { return cOpvParserRuleCall_3; }

		//Sns
		public RuleCall getSnsParserRuleCall_4() { return cSnsParserRuleCall_4; }
	}

	public class SnsElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Sns");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Alternatives cAlternatives_0 = (Alternatives)cGroup.eContents().get(0);
		private final Keyword cSnsKeyword_0_0 = (Keyword)cAlternatives_0.eContents().get(0);
		private final Keyword cAsteriskKeyword_0_1 = (Keyword)cAlternatives_0.eContents().get(1);
		private final Keyword cMultipleKeyword_0_2 = (Keyword)cAlternatives_0.eContents().get(2);
		private final Keyword cQuestionMarkKeyword_1 = (Keyword)cGroup.eContents().get(1);
		
		//Sns:
		//
		//	("sns" / * Jackrabbit feature* / | "*" | "multiple") "?"?;
		public ParserRule getRule() { return rule; }

		//("sns" / * Jackrabbit feature* / | "*" | "multiple") "?"?
		public Group getGroup() { return cGroup; }

		//"sns" / * Jackrabbit feature* / | "*" | "multiple"
		public Alternatives getAlternatives_0() { return cAlternatives_0; }

		//"sns"
		public Keyword getSnsKeyword_0_0() { return cSnsKeyword_0_0; }

		//"*"
		public Keyword getAsteriskKeyword_0_1() { return cAsteriskKeyword_0_1; }

		//"multiple"
		public Keyword getMultipleKeyword_0_2() { return cMultipleKeyword_0_2; }

		//"?"?
		public Keyword getQuestionMarkKeyword_1() { return cQuestionMarkKeyword_1; }
	}

	public class DefaultTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "DefaultType");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cEqualsSignKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final RuleCall cJcrStringParserRuleCall_1_0 = (RuleCall)cAlternatives_1.eContents().get(0);
		private final Keyword cQuestionMarkKeyword_1_1 = (Keyword)cAlternatives_1.eContents().get(1);
		
		//DefaultType:
		//
		//	"=" (JcrString | "?");
		public ParserRule getRule() { return rule; }

		//"=" (JcrString | "?")
		public Group getGroup() { return cGroup; }

		//"="
		public Keyword getEqualsSignKeyword_0() { return cEqualsSignKeyword_0; }

		//JcrString | "?"
		public Alternatives getAlternatives_1() { return cAlternatives_1; }

		//JcrString
		public RuleCall getJcrStringParserRuleCall_1_0() { return cJcrStringParserRuleCall_1_0; }

		//"?"
		public Keyword getQuestionMarkKeyword_1_1() { return cQuestionMarkKeyword_1_1; }
	}

	public class RequiredTypesElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "RequiredTypes");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final RuleCall cJcrStringListParserRuleCall_1_0 = (RuleCall)cAlternatives_1.eContents().get(0);
		private final Keyword cQuestionMarkKeyword_1_1 = (Keyword)cAlternatives_1.eContents().get(1);
		private final Keyword cRightParenthesisKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		//RequiredTypes:
		//
		//	"(" (JcrStringList | "?") ")";
		public ParserRule getRule() { return rule; }

		//"(" (JcrStringList | "?") ")"
		public Group getGroup() { return cGroup; }

		//"("
		public Keyword getLeftParenthesisKeyword_0() { return cLeftParenthesisKeyword_0; }

		//JcrStringList | "?"
		public Alternatives getAlternatives_1() { return cAlternatives_1; }

		//JcrStringList
		public RuleCall getJcrStringListParserRuleCall_1_0() { return cJcrStringListParserRuleCall_1_0; }

		//"?"
		public Keyword getQuestionMarkKeyword_1_1() { return cQuestionMarkKeyword_1_1; }

		//")"
		public Keyword getRightParenthesisKeyword_2() { return cRightParenthesisKeyword_2; }
	}

	public class NodeNameElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "NodeName");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cPlusSignKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final RuleCall cJcrStringParserRuleCall_1_0 = (RuleCall)cAlternatives_1.eContents().get(0);
		private final Keyword cAsteriskKeyword_1_1 = (Keyword)cAlternatives_1.eContents().get(1);
		
		//NodeName:
		//
		//	"+" (JcrString / *Jackrabbit feature * / | "*");
		public ParserRule getRule() { return rule; }

		//"+" (JcrString / *Jackrabbit feature * / | "*")
		public Group getGroup() { return cGroup; }

		//"+"
		public Keyword getPlusSignKeyword_0() { return cPlusSignKeyword_0; }

		//JcrString / *Jackrabbit feature * / | "*"
		public Alternatives getAlternatives_1() { return cAlternatives_1; }

		//JcrString
		public RuleCall getJcrStringParserRuleCall_1_0() { return cJcrStringParserRuleCall_1_0; }

		//"*"
		public Keyword getAsteriskKeyword_1_1() { return cAsteriskKeyword_1_1; }
	}

	public class PropertyDefElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "PropertyDef");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cPropertyNameParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final RuleCall cPropertyTypeParserRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		private final RuleCall cDefaultValuesParserRuleCall_2 = (RuleCall)cGroup.eContents().get(2);
		private final RuleCall cPropertyAttributeParserRuleCall_3 = (RuleCall)cGroup.eContents().get(3);
		private final RuleCall cValueConstraintsParserRuleCall_4 = (RuleCall)cGroup.eContents().get(4);
		
		//PropertyDef:
		//
		//	PropertyName PropertyType? DefaultValues? PropertyAttribute* ValueConstraints?;
		public ParserRule getRule() { return rule; }

		//PropertyName PropertyType? DefaultValues? PropertyAttribute* ValueConstraints?
		public Group getGroup() { return cGroup; }

		//PropertyName
		public RuleCall getPropertyNameParserRuleCall_0() { return cPropertyNameParserRuleCall_0; }

		//PropertyType?
		public RuleCall getPropertyTypeParserRuleCall_1() { return cPropertyTypeParserRuleCall_1; }

		//DefaultValues?
		public RuleCall getDefaultValuesParserRuleCall_2() { return cDefaultValuesParserRuleCall_2; }

		//PropertyAttribute*
		public RuleCall getPropertyAttributeParserRuleCall_3() { return cPropertyAttributeParserRuleCall_3; }

		//ValueConstraints?
		public RuleCall getValueConstraintsParserRuleCall_4() { return cValueConstraintsParserRuleCall_4; }
	}

	public class ValueConstraintsElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ValueConstraints");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLessThanSignKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final RuleCall cJcrStringListParserRuleCall_1_0 = (RuleCall)cAlternatives_1.eContents().get(0);
		private final Keyword cQuestionMarkKeyword_1_1 = (Keyword)cAlternatives_1.eContents().get(1);
		
		//ValueConstraints:
		//
		//	"<" (JcrStringList | "?");
		public ParserRule getRule() { return rule; }

		//"<" (JcrStringList | "?")
		public Group getGroup() { return cGroup; }

		//"<"
		public Keyword getLessThanSignKeyword_0() { return cLessThanSignKeyword_0; }

		//JcrStringList | "?"
		public Alternatives getAlternatives_1() { return cAlternatives_1; }

		//JcrStringList
		public RuleCall getJcrStringListParserRuleCall_1_0() { return cJcrStringListParserRuleCall_1_0; }

		//"?"
		public Keyword getQuestionMarkKeyword_1_1() { return cQuestionMarkKeyword_1_1; }
	}

	public class PropertyAttributeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "PropertyAttribute");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cAutocreatedParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cMandatoryParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cProtectedParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cOpvParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cMultipleParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		private final RuleCall cQueryOpsParserRuleCall_5 = (RuleCall)cAlternatives.eContents().get(5);
		private final RuleCall cNoFullTextParserRuleCall_6 = (RuleCall)cAlternatives.eContents().get(6);
		private final RuleCall cNoQueryOrderParserRuleCall_7 = (RuleCall)cAlternatives.eContents().get(7);
		private final RuleCall cPrimaryParserRuleCall_8 = (RuleCall)cAlternatives.eContents().get(8);
		
		//PropertyAttribute:
		//
		//	Autocreated | Mandatory | Protected | Opv | Multiple | QueryOps | NoFullText | NoQueryOrder | Primary;
		public ParserRule getRule() { return rule; }

		//Autocreated | Mandatory | Protected | Opv | Multiple | QueryOps | NoFullText | NoQueryOrder | Primary
		public Alternatives getAlternatives() { return cAlternatives; }

		//Autocreated
		public RuleCall getAutocreatedParserRuleCall_0() { return cAutocreatedParserRuleCall_0; }

		//Mandatory
		public RuleCall getMandatoryParserRuleCall_1() { return cMandatoryParserRuleCall_1; }

		//Protected
		public RuleCall getProtectedParserRuleCall_2() { return cProtectedParserRuleCall_2; }

		//Opv
		public RuleCall getOpvParserRuleCall_3() { return cOpvParserRuleCall_3; }

		//Multiple
		public RuleCall getMultipleParserRuleCall_4() { return cMultipleParserRuleCall_4; }

		//QueryOps
		public RuleCall getQueryOpsParserRuleCall_5() { return cQueryOpsParserRuleCall_5; }

		//NoFullText
		public RuleCall getNoFullTextParserRuleCall_6() { return cNoFullTextParserRuleCall_6; }

		//NoQueryOrder
		public RuleCall getNoQueryOrderParserRuleCall_7() { return cNoQueryOrderParserRuleCall_7; }

		//Primary
		public RuleCall getPrimaryParserRuleCall_8() { return cPrimaryParserRuleCall_8; }
	}

	public class NoQueryOrderElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "NoQueryOrder");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Alternatives cAlternatives_0 = (Alternatives)cGroup.eContents().get(0);
		private final Keyword cNoqueryorderKeyword_0_0 = (Keyword)cAlternatives_0.eContents().get(0);
		private final Keyword cNqordKeyword_0_1 = (Keyword)cAlternatives_0.eContents().get(1);
		private final Keyword cQuestionMarkKeyword_1 = (Keyword)cGroup.eContents().get(1);
		
		//NoQueryOrder:
		//
		//	("noqueryorder" | "nqord") "?"?;
		public ParserRule getRule() { return rule; }

		//("noqueryorder" | "nqord") "?"?
		public Group getGroup() { return cGroup; }

		//"noqueryorder" | "nqord"
		public Alternatives getAlternatives_0() { return cAlternatives_0; }

		//"noqueryorder"
		public Keyword getNoqueryorderKeyword_0_0() { return cNoqueryorderKeyword_0_0; }

		//"nqord"
		public Keyword getNqordKeyword_0_1() { return cNqordKeyword_0_1; }

		//"?"?
		public Keyword getQuestionMarkKeyword_1() { return cQuestionMarkKeyword_1; }
	}

	public class NoFullTextElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "NoFullText");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Alternatives cAlternatives_0 = (Alternatives)cGroup.eContents().get(0);
		private final Keyword cNofulltextKeyword_0_0 = (Keyword)cAlternatives_0.eContents().get(0);
		private final Keyword cNofKeyword_0_1 = (Keyword)cAlternatives_0.eContents().get(1);
		private final Keyword cQuestionMarkKeyword_1 = (Keyword)cGroup.eContents().get(1);
		
		//NoFullText:
		//
		//	("nofulltext" | "nof") "?"?;
		public ParserRule getRule() { return rule; }

		//("nofulltext" | "nof") "?"?
		public Group getGroup() { return cGroup; }

		//"nofulltext" | "nof"
		public Alternatives getAlternatives_0() { return cAlternatives_0; }

		//"nofulltext"
		public Keyword getNofulltextKeyword_0_0() { return cNofulltextKeyword_0_0; }

		//"nof"
		public Keyword getNofKeyword_0_1() { return cNofKeyword_0_1; }

		//"?"?
		public Keyword getQuestionMarkKeyword_1() { return cQuestionMarkKeyword_1; }
	}

	public class QueryOpsElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "QueryOps");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Alternatives cAlternatives_0 = (Alternatives)cGroup.eContents().get(0);
		private final Keyword cQueryopsKeyword_0_0 = (Keyword)cAlternatives_0.eContents().get(0);
		private final Keyword cQopKeyword_0_1 = (Keyword)cAlternatives_0.eContents().get(1);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final RuleCall cJcrStringParserRuleCall_1_0 = (RuleCall)cAlternatives_1.eContents().get(0);
		private final Keyword cQuestionMarkKeyword_1_1 = (Keyword)cAlternatives_1.eContents().get(1);
		
		//QueryOps:
		//
		//	("queryops" | "qop") (JcrString | "?");
		public ParserRule getRule() { return rule; }

		//("queryops" | "qop") (JcrString | "?")
		public Group getGroup() { return cGroup; }

		//"queryops" | "qop"
		public Alternatives getAlternatives_0() { return cAlternatives_0; }

		//"queryops"
		public Keyword getQueryopsKeyword_0_0() { return cQueryopsKeyword_0_0; }

		//"qop"
		public Keyword getQopKeyword_0_1() { return cQopKeyword_0_1; }

		//JcrString | "?"
		public Alternatives getAlternatives_1() { return cAlternatives_1; }

		//JcrString
		public RuleCall getJcrStringParserRuleCall_1_0() { return cJcrStringParserRuleCall_1_0; }

		//"?"
		public Keyword getQuestionMarkKeyword_1_1() { return cQuestionMarkKeyword_1_1; }
	}

	public class MultipleElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Multiple");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Alternatives cAlternatives_0 = (Alternatives)cGroup.eContents().get(0);
		private final Keyword cMultipleKeyword_0_0 = (Keyword)cAlternatives_0.eContents().get(0);
		private final Keyword cMulKeyword_0_1 = (Keyword)cAlternatives_0.eContents().get(1);
		private final Keyword cAsteriskKeyword_0_2 = (Keyword)cAlternatives_0.eContents().get(2);
		private final Keyword cQuestionMarkKeyword_1 = (Keyword)cGroup.eContents().get(1);
		
		////TODO it does not work. queryops sequence is in conflict with STRING terminal
		// //QueryOps:
		//
		//
		////	('queryops' | 'qop') (( "'" (Operator ("," Operator)*) "'") | '?')
		// //;
		// //Operator:
		//
		//
		////	'=' | '<>' | '<' | '<=' | '>' | '>=' | 'LIKE'
		// //;
		// Multiple:
		//
		//	("multiple" | "mul" | "*") "?"?;
		public ParserRule getRule() { return rule; }

		//("multiple" | "mul" | "*") "?"?
		public Group getGroup() { return cGroup; }

		//"multiple" | "mul" | "*"
		public Alternatives getAlternatives_0() { return cAlternatives_0; }

		//"multiple"
		public Keyword getMultipleKeyword_0_0() { return cMultipleKeyword_0_0; }

		//"mul"
		public Keyword getMulKeyword_0_1() { return cMulKeyword_0_1; }

		//"*"
		public Keyword getAsteriskKeyword_0_2() { return cAsteriskKeyword_0_2; }

		//"?"?
		public Keyword getQuestionMarkKeyword_1() { return cQuestionMarkKeyword_1; }
	}

	public class OpvElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Opv");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cCOPYKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cVERSIONKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		private final Keyword cINITIALIZEKeyword_2 = (Keyword)cAlternatives.eContents().get(2);
		private final Keyword cCOMPUTEKeyword_3 = (Keyword)cAlternatives.eContents().get(3);
		private final Keyword cIGNOREKeyword_4 = (Keyword)cAlternatives.eContents().get(4);
		private final Keyword cABORTKeyword_5 = (Keyword)cAlternatives.eContents().get(5);
		private final Group cGroup_6 = (Group)cAlternatives.eContents().get(6);
		private final Keyword cOPVKeyword_6_0 = (Keyword)cGroup_6.eContents().get(0);
		private final Keyword cQuestionMarkKeyword_6_1 = (Keyword)cGroup_6.eContents().get(1);
		
		//Opv: //TODO JCR Spec is not clear if '?' is optional
		// "COPY" | "VERSION" | "INITIALIZE" | "COMPUTE" | "IGNORE" | "ABORT"
		//
		//	| "OPV" "?";
		public ParserRule getRule() { return rule; }

		////TODO JCR Spec is not clear if '?' is optional
		// "COPY" | "VERSION" | "INITIALIZE" | "COMPUTE" | "IGNORE" | "ABORT" |
		//
		//"OPV" "?"
		public Alternatives getAlternatives() { return cAlternatives; }

		////TODO JCR Spec is not clear if '?' is optional
		// "COPY"
		public Keyword getCOPYKeyword_0() { return cCOPYKeyword_0; }

		//"VERSION"
		public Keyword getVERSIONKeyword_1() { return cVERSIONKeyword_1; }

		//"INITIALIZE"
		public Keyword getINITIALIZEKeyword_2() { return cINITIALIZEKeyword_2; }

		//"COMPUTE"
		public Keyword getCOMPUTEKeyword_3() { return cCOMPUTEKeyword_3; }

		//"IGNORE"
		public Keyword getIGNOREKeyword_4() { return cIGNOREKeyword_4; }

		//"ABORT"
		public Keyword getABORTKeyword_5() { return cABORTKeyword_5; }

		//"OPV" "?"
		public Group getGroup_6() { return cGroup_6; }

		//"OPV"
		public Keyword getOPVKeyword_6_0() { return cOPVKeyword_6_0; }

		//"?"
		public Keyword getQuestionMarkKeyword_6_1() { return cQuestionMarkKeyword_6_1; }
	}

	public class ProtectedElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Protected");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Alternatives cAlternatives_0 = (Alternatives)cGroup.eContents().get(0);
		private final Keyword cProtectedKeyword_0_0 = (Keyword)cAlternatives_0.eContents().get(0);
		private final Keyword cProKeyword_0_1 = (Keyword)cAlternatives_0.eContents().get(1);
		private final Keyword cPKeyword_0_2 = (Keyword)cAlternatives_0.eContents().get(2);
		private final Keyword cQuestionMarkKeyword_1 = (Keyword)cGroup.eContents().get(1);
		
		//Protected:
		//
		//	("protected" | "pro" | "p") "?"?;
		public ParserRule getRule() { return rule; }

		//("protected" | "pro" | "p") "?"?
		public Group getGroup() { return cGroup; }

		//"protected" | "pro" | "p"
		public Alternatives getAlternatives_0() { return cAlternatives_0; }

		//"protected"
		public Keyword getProtectedKeyword_0_0() { return cProtectedKeyword_0_0; }

		//"pro"
		public Keyword getProKeyword_0_1() { return cProKeyword_0_1; }

		//"p"
		public Keyword getPKeyword_0_2() { return cPKeyword_0_2; }

		//"?"?
		public Keyword getQuestionMarkKeyword_1() { return cQuestionMarkKeyword_1; }
	}

	public class MandatoryElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Mandatory");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Alternatives cAlternatives_0 = (Alternatives)cGroup.eContents().get(0);
		private final Keyword cMandatoryKeyword_0_0 = (Keyword)cAlternatives_0.eContents().get(0);
		private final Keyword cManKeyword_0_1 = (Keyword)cAlternatives_0.eContents().get(1);
		private final Keyword cMKeyword_0_2 = (Keyword)cAlternatives_0.eContents().get(2);
		private final Keyword cQuestionMarkKeyword_1 = (Keyword)cGroup.eContents().get(1);
		
		//Mandatory:
		//
		//	("mandatory" | "man" | "m") "?"?;
		public ParserRule getRule() { return rule; }

		//("mandatory" | "man" | "m") "?"?
		public Group getGroup() { return cGroup; }

		//"mandatory" | "man" | "m"
		public Alternatives getAlternatives_0() { return cAlternatives_0; }

		//"mandatory"
		public Keyword getMandatoryKeyword_0_0() { return cMandatoryKeyword_0_0; }

		//"man"
		public Keyword getManKeyword_0_1() { return cManKeyword_0_1; }

		//"m"
		public Keyword getMKeyword_0_2() { return cMKeyword_0_2; }

		//"?"?
		public Keyword getQuestionMarkKeyword_1() { return cQuestionMarkKeyword_1; }
	}

	public class AutocreatedElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Autocreated");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Alternatives cAlternatives_0 = (Alternatives)cGroup.eContents().get(0);
		private final Keyword cAutocreatedKeyword_0_0 = (Keyword)cAlternatives_0.eContents().get(0);
		private final Keyword cAutKeyword_0_1 = (Keyword)cAlternatives_0.eContents().get(1);
		private final Keyword cAKeyword_0_2 = (Keyword)cAlternatives_0.eContents().get(2);
		private final Keyword cQuestionMarkKeyword_1 = (Keyword)cGroup.eContents().get(1);
		
		//Autocreated:
		//
		//	("autocreated" | "aut" | "a") "?"?;
		public ParserRule getRule() { return rule; }

		//("autocreated" | "aut" | "a") "?"?
		public Group getGroup() { return cGroup; }

		//"autocreated" | "aut" | "a"
		public Alternatives getAlternatives_0() { return cAlternatives_0; }

		//"autocreated"
		public Keyword getAutocreatedKeyword_0_0() { return cAutocreatedKeyword_0_0; }

		//"aut"
		public Keyword getAutKeyword_0_1() { return cAutKeyword_0_1; }

		//"a"
		public Keyword getAKeyword_0_2() { return cAKeyword_0_2; }

		//"?"?
		public Keyword getQuestionMarkKeyword_1() { return cQuestionMarkKeyword_1; }
	}

	public class PrimaryElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Primary");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cPrimaryKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cExclamationMarkKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		
		//Primary:
		//
		//	"primary" //This attribute is not defined by JCR
		//
		//	/ * Jackrabbit feature. * / | "!";
		public ParserRule getRule() { return rule; }

		//"primary" //This attribute is not defined by JCR
		//
		/// * Jackrabbit feature. * / | "!"
		public Alternatives getAlternatives() { return cAlternatives; }

		//"primary"
		public Keyword getPrimaryKeyword_0() { return cPrimaryKeyword_0; }

		//"!"
		public Keyword getExclamationMarkKeyword_1() { return cExclamationMarkKeyword_1; }
	}

	public class DefaultValuesElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "DefaultValues");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cEqualsSignKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final RuleCall cJcrStringListParserRuleCall_1_0 = (RuleCall)cAlternatives_1.eContents().get(0);
		private final Keyword cQuestionMarkKeyword_1_1 = (Keyword)cAlternatives_1.eContents().get(1);
		
		//DefaultValues:
		//
		//	"=" (JcrStringList | "?");
		public ParserRule getRule() { return rule; }

		//"=" (JcrStringList | "?")
		public Group getGroup() { return cGroup; }

		//"="
		public Keyword getEqualsSignKeyword_0() { return cEqualsSignKeyword_0; }

		//JcrStringList | "?"
		public Alternatives getAlternatives_1() { return cAlternatives_1; }

		//JcrStringList
		public RuleCall getJcrStringListParserRuleCall_1_0() { return cJcrStringListParserRuleCall_1_0; }

		//"?"
		public Keyword getQuestionMarkKeyword_1_1() { return cQuestionMarkKeyword_1_1; }
	}

	public class PropertyTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "PropertyType");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Keyword cSTRINGKeyword_1_0 = (Keyword)cAlternatives_1.eContents().get(0);
		private final Keyword cBINARYKeyword_1_1 = (Keyword)cAlternatives_1.eContents().get(1);
		private final Keyword cLONGKeyword_1_2 = (Keyword)cAlternatives_1.eContents().get(2);
		private final Keyword cDOUBLEKeyword_1_3 = (Keyword)cAlternatives_1.eContents().get(3);
		private final Keyword cBOOLEANKeyword_1_4 = (Keyword)cAlternatives_1.eContents().get(4);
		private final Keyword cDATEKeyword_1_5 = (Keyword)cAlternatives_1.eContents().get(5);
		private final Keyword cNAMEKeyword_1_6 = (Keyword)cAlternatives_1.eContents().get(6);
		private final Keyword cPATHKeyword_1_7 = (Keyword)cAlternatives_1.eContents().get(7);
		private final Keyword cREFERENCEKeyword_1_8 = (Keyword)cAlternatives_1.eContents().get(8);
		private final Keyword cWEAKREFERENCEKeyword_1_9 = (Keyword)cAlternatives_1.eContents().get(9);
		private final Keyword cDECIMALKeyword_1_10 = (Keyword)cAlternatives_1.eContents().get(10);
		private final Keyword cURIKeyword_1_11 = (Keyword)cAlternatives_1.eContents().get(11);
		private final Keyword cUNDEFINEDKeyword_1_12 = (Keyword)cAlternatives_1.eContents().get(12);
		private final Keyword cAsteriskKeyword_1_13 = (Keyword)cAlternatives_1.eContents().get(13);
		private final Keyword cQuestionMarkKeyword_1_14 = (Keyword)cAlternatives_1.eContents().get(14);
		private final Keyword cRightParenthesisKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		//PropertyType:
		//
		//	"(" ("STRING" | "BINARY" | "LONG" | "DOUBLE" | "BOOLEAN" | "DATE" | "NAME" | "PATH" | "REFERENCE" | "WEAKREFERENCE" |
		//
		//	"DECIMAL" | "URI" | "UNDEFINED" | "*" | "?") ")";
		public ParserRule getRule() { return rule; }

		//"(" ("STRING" | "BINARY" | "LONG" | "DOUBLE" | "BOOLEAN" | "DATE" | "NAME" | "PATH" | "REFERENCE" | "WEAKREFERENCE" |
		//
		//"DECIMAL" | "URI" | "UNDEFINED" | "*" | "?") ")"
		public Group getGroup() { return cGroup; }

		//"("
		public Keyword getLeftParenthesisKeyword_0() { return cLeftParenthesisKeyword_0; }

		//"STRING" | "BINARY" | "LONG" | "DOUBLE" | "BOOLEAN" | "DATE" | "NAME" | "PATH" | "REFERENCE" | "WEAKREFERENCE" |
		//
		//"DECIMAL" | "URI" | "UNDEFINED" | "*" | "?"
		public Alternatives getAlternatives_1() { return cAlternatives_1; }

		//"STRING"
		public Keyword getSTRINGKeyword_1_0() { return cSTRINGKeyword_1_0; }

		//"BINARY"
		public Keyword getBINARYKeyword_1_1() { return cBINARYKeyword_1_1; }

		//"LONG"
		public Keyword getLONGKeyword_1_2() { return cLONGKeyword_1_2; }

		//"DOUBLE"
		public Keyword getDOUBLEKeyword_1_3() { return cDOUBLEKeyword_1_3; }

		//"BOOLEAN"
		public Keyword getBOOLEANKeyword_1_4() { return cBOOLEANKeyword_1_4; }

		//"DATE"
		public Keyword getDATEKeyword_1_5() { return cDATEKeyword_1_5; }

		//"NAME"
		public Keyword getNAMEKeyword_1_6() { return cNAMEKeyword_1_6; }

		//"PATH"
		public Keyword getPATHKeyword_1_7() { return cPATHKeyword_1_7; }

		//"REFERENCE"
		public Keyword getREFERENCEKeyword_1_8() { return cREFERENCEKeyword_1_8; }

		//"WEAKREFERENCE"
		public Keyword getWEAKREFERENCEKeyword_1_9() { return cWEAKREFERENCEKeyword_1_9; }

		//"DECIMAL"
		public Keyword getDECIMALKeyword_1_10() { return cDECIMALKeyword_1_10; }

		//"URI"
		public Keyword getURIKeyword_1_11() { return cURIKeyword_1_11; }

		//"UNDEFINED"
		public Keyword getUNDEFINEDKeyword_1_12() { return cUNDEFINEDKeyword_1_12; }

		//"*"
		public Keyword getAsteriskKeyword_1_13() { return cAsteriskKeyword_1_13; }

		//"?"
		public Keyword getQuestionMarkKeyword_1_14() { return cQuestionMarkKeyword_1_14; }

		//")"
		public Keyword getRightParenthesisKeyword_2() { return cRightParenthesisKeyword_2; }
	}

	public class PropertyNameElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "PropertyName");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cHyphenMinusKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final RuleCall cJcrStringParserRuleCall_1_0 = (RuleCall)cAlternatives_1.eContents().get(0);
		private final Keyword cAsteriskKeyword_1_1 = (Keyword)cAlternatives_1.eContents().get(1);
		
		//PropertyName:
		//
		//	"-" (JcrString / *Jackrabbit feature * / | "*");
		public ParserRule getRule() { return rule; }

		//"-" (JcrString / *Jackrabbit feature * / | "*")
		public Group getGroup() { return cGroup; }

		//"-"
		public Keyword getHyphenMinusKeyword_0() { return cHyphenMinusKeyword_0; }

		//JcrString / *Jackrabbit feature * / | "*"
		public Alternatives getAlternatives_1() { return cAlternatives_1; }

		//JcrString
		public RuleCall getJcrStringParserRuleCall_1_0() { return cJcrStringParserRuleCall_1_0; }

		//"*"
		public Keyword getAsteriskKeyword_1_1() { return cAsteriskKeyword_1_1; }
	}

	public class NodeTypeAttributeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "NodeTypeAttribute");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cOrderableParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cMixinParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cAbstractParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cQueryParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cPrimaryItemParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		
		//NodeTypeAttribute:
		//
		//	Orderable | Mixin | Abstract | Query | PrimaryItem;
		public ParserRule getRule() { return rule; }

		//Orderable | Mixin | Abstract | Query | PrimaryItem
		public Alternatives getAlternatives() { return cAlternatives; }

		//Orderable
		public RuleCall getOrderableParserRuleCall_0() { return cOrderableParserRuleCall_0; }

		//Mixin
		public RuleCall getMixinParserRuleCall_1() { return cMixinParserRuleCall_1; }

		//Abstract
		public RuleCall getAbstractParserRuleCall_2() { return cAbstractParserRuleCall_2; }

		//Query
		public RuleCall getQueryParserRuleCall_3() { return cQueryParserRuleCall_3; }

		//PrimaryItem
		public RuleCall getPrimaryItemParserRuleCall_4() { return cPrimaryItemParserRuleCall_4; }
	}

	public class PrimaryItemElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "PrimaryItem");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Alternatives cAlternatives_0 = (Alternatives)cGroup.eContents().get(0);
		private final Keyword cPrimaryitemKeyword_0_0 = (Keyword)cAlternatives_0.eContents().get(0);
		private final Keyword cExclamationMarkKeyword_0_1 = (Keyword)cAlternatives_0.eContents().get(1);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final RuleCall cJcrStringParserRuleCall_1_0 = (RuleCall)cAlternatives_1.eContents().get(0);
		private final Keyword cQuestionMarkKeyword_1_1 = (Keyword)cAlternatives_1.eContents().get(1);
		
		//PrimaryItem:
		//
		//	("primaryitem" | "!") (JcrString | "?");
		public ParserRule getRule() { return rule; }

		//("primaryitem" | "!") (JcrString | "?")
		public Group getGroup() { return cGroup; }

		//"primaryitem" | "!"
		public Alternatives getAlternatives_0() { return cAlternatives_0; }

		//"primaryitem"
		public Keyword getPrimaryitemKeyword_0_0() { return cPrimaryitemKeyword_0_0; }

		//"!"
		public Keyword getExclamationMarkKeyword_0_1() { return cExclamationMarkKeyword_0_1; }

		//JcrString | "?"
		public Alternatives getAlternatives_1() { return cAlternatives_1; }

		//JcrString
		public RuleCall getJcrStringParserRuleCall_1_0() { return cJcrStringParserRuleCall_1_0; }

		//"?"
		public Keyword getQuestionMarkKeyword_1_1() { return cQuestionMarkKeyword_1_1; }
	}

	public class QueryElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Query");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Alternatives cAlternatives_0 = (Alternatives)cAlternatives.eContents().get(0);
		private final Keyword cNoqueryKeyword_0_0 = (Keyword)cAlternatives_0.eContents().get(0);
		private final Keyword cNqKeyword_0_1 = (Keyword)cAlternatives_0.eContents().get(1);
		private final Alternatives cAlternatives_1 = (Alternatives)cAlternatives.eContents().get(1);
		private final Keyword cQueryKeyword_1_0 = (Keyword)cAlternatives_1.eContents().get(0);
		private final Keyword cQKeyword_1_1 = (Keyword)cAlternatives_1.eContents().get(1);
		
		//Query:
		//
		//	("noquery" | "nq") | ("query" | "q");
		public ParserRule getRule() { return rule; }

		//("noquery" | "nq") | ("query" | "q")
		public Alternatives getAlternatives() { return cAlternatives; }

		//"noquery" | "nq"
		public Alternatives getAlternatives_0() { return cAlternatives_0; }

		//"noquery"
		public Keyword getNoqueryKeyword_0_0() { return cNoqueryKeyword_0_0; }

		//"nq"
		public Keyword getNqKeyword_0_1() { return cNqKeyword_0_1; }

		//"query" | "q"
		public Alternatives getAlternatives_1() { return cAlternatives_1; }

		//"query"
		public Keyword getQueryKeyword_1_0() { return cQueryKeyword_1_0; }

		//"q"
		public Keyword getQKeyword_1_1() { return cQKeyword_1_1; }
	}

	public class AbstractElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Abstract");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Alternatives cAlternatives_0 = (Alternatives)cGroup.eContents().get(0);
		private final Keyword cAbstractKeyword_0_0 = (Keyword)cAlternatives_0.eContents().get(0);
		private final Keyword cAbsKeyword_0_1 = (Keyword)cAlternatives_0.eContents().get(1);
		private final Keyword cAKeyword_0_2 = (Keyword)cAlternatives_0.eContents().get(2);
		private final Keyword cQuestionMarkKeyword_1 = (Keyword)cGroup.eContents().get(1);
		
		//Abstract:
		//
		//	("abstract" | "abs" | "a") "?"?;
		public ParserRule getRule() { return rule; }

		//("abstract" | "abs" | "a") "?"?
		public Group getGroup() { return cGroup; }

		//"abstract" | "abs" | "a"
		public Alternatives getAlternatives_0() { return cAlternatives_0; }

		//"abstract"
		public Keyword getAbstractKeyword_0_0() { return cAbstractKeyword_0_0; }

		//"abs"
		public Keyword getAbsKeyword_0_1() { return cAbsKeyword_0_1; }

		//"a"
		public Keyword getAKeyword_0_2() { return cAKeyword_0_2; }

		//"?"?
		public Keyword getQuestionMarkKeyword_1() { return cQuestionMarkKeyword_1; }
	}

	public class MixinElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Mixin");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Alternatives cAlternatives_0 = (Alternatives)cGroup.eContents().get(0);
		private final Keyword cMixinKeyword_0_0 = (Keyword)cAlternatives_0.eContents().get(0);
		private final Keyword cMixKeyword_0_1 = (Keyword)cAlternatives_0.eContents().get(1);
		private final Keyword cMKeyword_0_2 = (Keyword)cAlternatives_0.eContents().get(2);
		private final Keyword cQuestionMarkKeyword_1 = (Keyword)cGroup.eContents().get(1);
		
		//Mixin:
		//
		//	("mixin" | "mix" | "m") "?"?;
		public ParserRule getRule() { return rule; }

		//("mixin" | "mix" | "m") "?"?
		public Group getGroup() { return cGroup; }

		//"mixin" | "mix" | "m"
		public Alternatives getAlternatives_0() { return cAlternatives_0; }

		//"mixin"
		public Keyword getMixinKeyword_0_0() { return cMixinKeyword_0_0; }

		//"mix"
		public Keyword getMixKeyword_0_1() { return cMixKeyword_0_1; }

		//"m"
		public Keyword getMKeyword_0_2() { return cMKeyword_0_2; }

		//"?"?
		public Keyword getQuestionMarkKeyword_1() { return cQuestionMarkKeyword_1; }
	}

	public class OrderableElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Orderable");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Alternatives cAlternatives_0 = (Alternatives)cGroup.eContents().get(0);
		private final Keyword cOrderableKeyword_0_0 = (Keyword)cAlternatives_0.eContents().get(0);
		private final Keyword cOrdKeyword_0_1 = (Keyword)cAlternatives_0.eContents().get(1);
		private final Keyword cOKeyword_0_2 = (Keyword)cAlternatives_0.eContents().get(2);
		private final Keyword cQuestionMarkKeyword_1 = (Keyword)cGroup.eContents().get(1);
		
		//Orderable:
		//
		//	("orderable" | "ord" | "o") "?"?;
		public ParserRule getRule() { return rule; }

		//("orderable" | "ord" | "o") "?"?
		public Group getGroup() { return cGroup; }

		//"orderable" | "ord" | "o"
		public Alternatives getAlternatives_0() { return cAlternatives_0; }

		//"orderable"
		public Keyword getOrderableKeyword_0_0() { return cOrderableKeyword_0_0; }

		//"ord"
		public Keyword getOrdKeyword_0_1() { return cOrdKeyword_0_1; }

		//"o"
		public Keyword getOKeyword_0_2() { return cOKeyword_0_2; }

		//"?"?
		public Keyword getQuestionMarkKeyword_1() { return cQuestionMarkKeyword_1; }
	}

	public class SuperTypesElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "SuperTypes");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cGreaterThanSignKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final RuleCall cJcrStringListParserRuleCall_1_0 = (RuleCall)cAlternatives_1.eContents().get(0);
		private final Keyword cQuestionMarkKeyword_1_1 = (Keyword)cAlternatives_1.eContents().get(1);
		
		//SuperTypes:
		//
		//	">" (JcrStringList | "?");
		public ParserRule getRule() { return rule; }

		//">" (JcrStringList | "?")
		public Group getGroup() { return cGroup; }

		//">"
		public Keyword getGreaterThanSignKeyword_0() { return cGreaterThanSignKeyword_0; }

		//JcrStringList | "?"
		public Alternatives getAlternatives_1() { return cAlternatives_1; }

		//JcrStringList
		public RuleCall getJcrStringListParserRuleCall_1_0() { return cJcrStringListParserRuleCall_1_0; }

		//"?"
		public Keyword getQuestionMarkKeyword_1_1() { return cQuestionMarkKeyword_1_1; }
	}

	public class NodeTypeNameElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "NodeTypeName");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLeftSquareBracketKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameJcrStringParserRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		//NodeTypeName:
		//
		//	"[" name=JcrString "]";
		public ParserRule getRule() { return rule; }

		//"[" name=JcrString "]"
		public Group getGroup() { return cGroup; }

		//"["
		public Keyword getLeftSquareBracketKeyword_0() { return cLeftSquareBracketKeyword_0; }

		//name=JcrString
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//JcrString
		public RuleCall getNameJcrStringParserRuleCall_1_0() { return cNameJcrStringParserRuleCall_1_0; }

		//"]"
		public Keyword getRightSquareBracketKeyword_2() { return cRightSquareBracketKeyword_2; }
	}

	public class NsMappingElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "NsMapping");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLessThanSignKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNamePrefixParserRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cEqualsSignKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cUriAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cUriUriParserRuleCall_3_0 = (RuleCall)cUriAssignment_3.eContents().get(0);
		private final Keyword cGreaterThanSignKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//NsMapping:
		//
		//	"<" name=Prefix "=" uri=Uri ">";
		public ParserRule getRule() { return rule; }

		//"<" name=Prefix "=" uri=Uri ">"
		public Group getGroup() { return cGroup; }

		//"<"
		public Keyword getLessThanSignKeyword_0() { return cLessThanSignKeyword_0; }

		//name=Prefix
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//Prefix
		public RuleCall getNamePrefixParserRuleCall_1_0() { return cNamePrefixParserRuleCall_1_0; }

		//"="
		public Keyword getEqualsSignKeyword_2() { return cEqualsSignKeyword_2; }

		//uri=Uri
		public Assignment getUriAssignment_3() { return cUriAssignment_3; }

		//Uri
		public RuleCall getUriUriParserRuleCall_3_0() { return cUriUriParserRuleCall_3_0; }

		//">"
		public Keyword getGreaterThanSignKeyword_4() { return cGreaterThanSignKeyword_4; }
	}

	public class PrefixElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Prefix");
		private final RuleCall cXiDParserRuleCall = (RuleCall)rule.eContents().get(1);
		
		//Prefix:
		//
		//	XiD;
		public ParserRule getRule() { return rule; }

		//XiD
		public RuleCall getXiDParserRuleCall() { return cXiDParserRuleCall; }
	}

	public class UriElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Uri");
		private final RuleCall cJcrStringParserRuleCall = (RuleCall)rule.eContents().get(1);
		
		//Uri:
		//
		//	JcrString;
		public ParserRule getRule() { return rule; }

		//JcrString
		public RuleCall getJcrStringParserRuleCall() { return cJcrStringParserRuleCall; }
	}

	public class JcrStringListElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "JcrStringList");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cJcrStringParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cCommaKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final RuleCall cJcrStringParserRuleCall_1_1 = (RuleCall)cGroup_1.eContents().get(1);
		
		//JcrStringList:
		//
		//	JcrString ("," JcrString)*;
		public ParserRule getRule() { return rule; }

		//JcrString ("," JcrString)*
		public Group getGroup() { return cGroup; }

		//JcrString
		public RuleCall getJcrStringParserRuleCall_0() { return cJcrStringParserRuleCall_0; }

		//("," JcrString)*
		public Group getGroup_1() { return cGroup_1; }

		//","
		public Keyword getCommaKeyword_1_0() { return cCommaKeyword_1_0; }

		//JcrString
		public RuleCall getJcrStringParserRuleCall_1_1() { return cJcrStringParserRuleCall_1_1; }
	}

	public class JcrStringElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "JcrString");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cSTRINGTerminalRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cXiDParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//JcrString:
		//
		//	STRING | XiD;
		public ParserRule getRule() { return rule; }

		//STRING | XiD
		public Alternatives getAlternatives() { return cAlternatives; }

		//STRING
		public RuleCall getSTRINGTerminalRuleCall_0() { return cSTRINGTerminalRuleCall_0; }

		//XiD
		public RuleCall getXiDParserRuleCall_1() { return cXiDParserRuleCall_1; }
	}

	public class XiDElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "XiD");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cEXIDTerminalRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final Keyword cMixKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		
		//XiD:
		//
		//	EXID | "mix";
		public ParserRule getRule() { return rule; }

		//EXID | "mix"
		public Alternatives getAlternatives() { return cAlternatives; }

		//EXID
		public RuleCall getEXIDTerminalRuleCall_0() { return cEXIDTerminalRuleCall_0; }

		//"mix"
		public Keyword getMixKeyword_1() { return cMixKeyword_1; }
	}
	
	
	private ModelElements pModel;
	private NodeTypeDefElements pNodeTypeDef;
	private ChildNodeDefElements pChildNodeDef;
	private NodeAttributeElements pNodeAttribute;
	private SnsElements pSns;
	private DefaultTypeElements pDefaultType;
	private RequiredTypesElements pRequiredTypes;
	private NodeNameElements pNodeName;
	private PropertyDefElements pPropertyDef;
	private ValueConstraintsElements pValueConstraints;
	private PropertyAttributeElements pPropertyAttribute;
	private NoQueryOrderElements pNoQueryOrder;
	private NoFullTextElements pNoFullText;
	private QueryOpsElements pQueryOps;
	private MultipleElements pMultiple;
	private OpvElements pOpv;
	private ProtectedElements pProtected;
	private MandatoryElements pMandatory;
	private AutocreatedElements pAutocreated;
	private PrimaryElements pPrimary;
	private DefaultValuesElements pDefaultValues;
	private PropertyTypeElements pPropertyType;
	private PropertyNameElements pPropertyName;
	private NodeTypeAttributeElements pNodeTypeAttribute;
	private PrimaryItemElements pPrimaryItem;
	private QueryElements pQuery;
	private AbstractElements pAbstract;
	private MixinElements pMixin;
	private OrderableElements pOrderable;
	private SuperTypesElements pSuperTypes;
	private NodeTypeNameElements pNodeTypeName;
	private NsMappingElements pNsMapping;
	private PrefixElements pPrefix;
	private UriElements pUri;
	private JcrStringListElements pJcrStringList;
	private JcrStringElements pJcrString;
	private XiDElements pXiD;
	private TerminalRule tEXID;
	
	private final Grammar grammar;

	private TerminalsGrammarAccess gaTerminals;

	@Inject
	public CndGrammarAccess(GrammarProvider grammarProvider,
		TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("com.github.evra.jcr.Cnd".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	
	public Grammar getGrammar() {
		return grammar;
	}
	

	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	////!! http://www.eclipse.org/forums/index.php/t/489632/
	//
	//Model:
	//
	//	(mappings+=NsMapping | nodetypes+=NodeTypeDef)*;
	public ModelElements getModelAccess() {
		return (pModel != null) ? pModel : (pModel = new ModelElements());
	}
	
	public ParserRule getModelRule() {
		return getModelAccess().getRule();
	}

	//NodeTypeDef:
	//
	//	NodeTypeName SuperTypes? attributes+=NodeTypeAttribute* (PropertyDef | ChildNodeDef)*;
	public NodeTypeDefElements getNodeTypeDefAccess() {
		return (pNodeTypeDef != null) ? pNodeTypeDef : (pNodeTypeDef = new NodeTypeDefElements());
	}
	
	public ParserRule getNodeTypeDefRule() {
		return getNodeTypeDefAccess().getRule();
	}

	//ChildNodeDef:
	//
	//	NodeName RequiredTypes? DefaultType? NodeAttribute*;
	public ChildNodeDefElements getChildNodeDefAccess() {
		return (pChildNodeDef != null) ? pChildNodeDef : (pChildNodeDef = new ChildNodeDefElements());
	}
	
	public ParserRule getChildNodeDefRule() {
		return getChildNodeDefAccess().getRule();
	}

	//NodeAttribute:
	//
	//	Autocreated | Mandatory | Protected | Opv | Sns;
	public NodeAttributeElements getNodeAttributeAccess() {
		return (pNodeAttribute != null) ? pNodeAttribute : (pNodeAttribute = new NodeAttributeElements());
	}
	
	public ParserRule getNodeAttributeRule() {
		return getNodeAttributeAccess().getRule();
	}

	//Sns:
	//
	//	("sns" / * Jackrabbit feature* / | "*" | "multiple") "?"?;
	public SnsElements getSnsAccess() {
		return (pSns != null) ? pSns : (pSns = new SnsElements());
	}
	
	public ParserRule getSnsRule() {
		return getSnsAccess().getRule();
	}

	//DefaultType:
	//
	//	"=" (JcrString | "?");
	public DefaultTypeElements getDefaultTypeAccess() {
		return (pDefaultType != null) ? pDefaultType : (pDefaultType = new DefaultTypeElements());
	}
	
	public ParserRule getDefaultTypeRule() {
		return getDefaultTypeAccess().getRule();
	}

	//RequiredTypes:
	//
	//	"(" (JcrStringList | "?") ")";
	public RequiredTypesElements getRequiredTypesAccess() {
		return (pRequiredTypes != null) ? pRequiredTypes : (pRequiredTypes = new RequiredTypesElements());
	}
	
	public ParserRule getRequiredTypesRule() {
		return getRequiredTypesAccess().getRule();
	}

	//NodeName:
	//
	//	"+" (JcrString / *Jackrabbit feature * / | "*");
	public NodeNameElements getNodeNameAccess() {
		return (pNodeName != null) ? pNodeName : (pNodeName = new NodeNameElements());
	}
	
	public ParserRule getNodeNameRule() {
		return getNodeNameAccess().getRule();
	}

	//PropertyDef:
	//
	//	PropertyName PropertyType? DefaultValues? PropertyAttribute* ValueConstraints?;
	public PropertyDefElements getPropertyDefAccess() {
		return (pPropertyDef != null) ? pPropertyDef : (pPropertyDef = new PropertyDefElements());
	}
	
	public ParserRule getPropertyDefRule() {
		return getPropertyDefAccess().getRule();
	}

	//ValueConstraints:
	//
	//	"<" (JcrStringList | "?");
	public ValueConstraintsElements getValueConstraintsAccess() {
		return (pValueConstraints != null) ? pValueConstraints : (pValueConstraints = new ValueConstraintsElements());
	}
	
	public ParserRule getValueConstraintsRule() {
		return getValueConstraintsAccess().getRule();
	}

	//PropertyAttribute:
	//
	//	Autocreated | Mandatory | Protected | Opv | Multiple | QueryOps | NoFullText | NoQueryOrder | Primary;
	public PropertyAttributeElements getPropertyAttributeAccess() {
		return (pPropertyAttribute != null) ? pPropertyAttribute : (pPropertyAttribute = new PropertyAttributeElements());
	}
	
	public ParserRule getPropertyAttributeRule() {
		return getPropertyAttributeAccess().getRule();
	}

	//NoQueryOrder:
	//
	//	("noqueryorder" | "nqord") "?"?;
	public NoQueryOrderElements getNoQueryOrderAccess() {
		return (pNoQueryOrder != null) ? pNoQueryOrder : (pNoQueryOrder = new NoQueryOrderElements());
	}
	
	public ParserRule getNoQueryOrderRule() {
		return getNoQueryOrderAccess().getRule();
	}

	//NoFullText:
	//
	//	("nofulltext" | "nof") "?"?;
	public NoFullTextElements getNoFullTextAccess() {
		return (pNoFullText != null) ? pNoFullText : (pNoFullText = new NoFullTextElements());
	}
	
	public ParserRule getNoFullTextRule() {
		return getNoFullTextAccess().getRule();
	}

	//QueryOps:
	//
	//	("queryops" | "qop") (JcrString | "?");
	public QueryOpsElements getQueryOpsAccess() {
		return (pQueryOps != null) ? pQueryOps : (pQueryOps = new QueryOpsElements());
	}
	
	public ParserRule getQueryOpsRule() {
		return getQueryOpsAccess().getRule();
	}

	////TODO it does not work. queryops sequence is in conflict with STRING terminal
	// //QueryOps:
	//
	//
	////	('queryops' | 'qop') (( "'" (Operator ("," Operator)*) "'") | '?')
	// //;
	// //Operator:
	//
	//
	////	'=' | '<>' | '<' | '<=' | '>' | '>=' | 'LIKE'
	// //;
	// Multiple:
	//
	//	("multiple" | "mul" | "*") "?"?;
	public MultipleElements getMultipleAccess() {
		return (pMultiple != null) ? pMultiple : (pMultiple = new MultipleElements());
	}
	
	public ParserRule getMultipleRule() {
		return getMultipleAccess().getRule();
	}

	//Opv: //TODO JCR Spec is not clear if '?' is optional
	// "COPY" | "VERSION" | "INITIALIZE" | "COMPUTE" | "IGNORE" | "ABORT"
	//
	//	| "OPV" "?";
	public OpvElements getOpvAccess() {
		return (pOpv != null) ? pOpv : (pOpv = new OpvElements());
	}
	
	public ParserRule getOpvRule() {
		return getOpvAccess().getRule();
	}

	//Protected:
	//
	//	("protected" | "pro" | "p") "?"?;
	public ProtectedElements getProtectedAccess() {
		return (pProtected != null) ? pProtected : (pProtected = new ProtectedElements());
	}
	
	public ParserRule getProtectedRule() {
		return getProtectedAccess().getRule();
	}

	//Mandatory:
	//
	//	("mandatory" | "man" | "m") "?"?;
	public MandatoryElements getMandatoryAccess() {
		return (pMandatory != null) ? pMandatory : (pMandatory = new MandatoryElements());
	}
	
	public ParserRule getMandatoryRule() {
		return getMandatoryAccess().getRule();
	}

	//Autocreated:
	//
	//	("autocreated" | "aut" | "a") "?"?;
	public AutocreatedElements getAutocreatedAccess() {
		return (pAutocreated != null) ? pAutocreated : (pAutocreated = new AutocreatedElements());
	}
	
	public ParserRule getAutocreatedRule() {
		return getAutocreatedAccess().getRule();
	}

	//Primary:
	//
	//	"primary" //This attribute is not defined by JCR
	//
	//	/ * Jackrabbit feature. * / | "!";
	public PrimaryElements getPrimaryAccess() {
		return (pPrimary != null) ? pPrimary : (pPrimary = new PrimaryElements());
	}
	
	public ParserRule getPrimaryRule() {
		return getPrimaryAccess().getRule();
	}

	//DefaultValues:
	//
	//	"=" (JcrStringList | "?");
	public DefaultValuesElements getDefaultValuesAccess() {
		return (pDefaultValues != null) ? pDefaultValues : (pDefaultValues = new DefaultValuesElements());
	}
	
	public ParserRule getDefaultValuesRule() {
		return getDefaultValuesAccess().getRule();
	}

	//PropertyType:
	//
	//	"(" ("STRING" | "BINARY" | "LONG" | "DOUBLE" | "BOOLEAN" | "DATE" | "NAME" | "PATH" | "REFERENCE" | "WEAKREFERENCE" |
	//
	//	"DECIMAL" | "URI" | "UNDEFINED" | "*" | "?") ")";
	public PropertyTypeElements getPropertyTypeAccess() {
		return (pPropertyType != null) ? pPropertyType : (pPropertyType = new PropertyTypeElements());
	}
	
	public ParserRule getPropertyTypeRule() {
		return getPropertyTypeAccess().getRule();
	}

	//PropertyName:
	//
	//	"-" (JcrString / *Jackrabbit feature * / | "*");
	public PropertyNameElements getPropertyNameAccess() {
		return (pPropertyName != null) ? pPropertyName : (pPropertyName = new PropertyNameElements());
	}
	
	public ParserRule getPropertyNameRule() {
		return getPropertyNameAccess().getRule();
	}

	//NodeTypeAttribute:
	//
	//	Orderable | Mixin | Abstract | Query | PrimaryItem;
	public NodeTypeAttributeElements getNodeTypeAttributeAccess() {
		return (pNodeTypeAttribute != null) ? pNodeTypeAttribute : (pNodeTypeAttribute = new NodeTypeAttributeElements());
	}
	
	public ParserRule getNodeTypeAttributeRule() {
		return getNodeTypeAttributeAccess().getRule();
	}

	//PrimaryItem:
	//
	//	("primaryitem" | "!") (JcrString | "?");
	public PrimaryItemElements getPrimaryItemAccess() {
		return (pPrimaryItem != null) ? pPrimaryItem : (pPrimaryItem = new PrimaryItemElements());
	}
	
	public ParserRule getPrimaryItemRule() {
		return getPrimaryItemAccess().getRule();
	}

	//Query:
	//
	//	("noquery" | "nq") | ("query" | "q");
	public QueryElements getQueryAccess() {
		return (pQuery != null) ? pQuery : (pQuery = new QueryElements());
	}
	
	public ParserRule getQueryRule() {
		return getQueryAccess().getRule();
	}

	//Abstract:
	//
	//	("abstract" | "abs" | "a") "?"?;
	public AbstractElements getAbstractAccess() {
		return (pAbstract != null) ? pAbstract : (pAbstract = new AbstractElements());
	}
	
	public ParserRule getAbstractRule() {
		return getAbstractAccess().getRule();
	}

	//Mixin:
	//
	//	("mixin" | "mix" | "m") "?"?;
	public MixinElements getMixinAccess() {
		return (pMixin != null) ? pMixin : (pMixin = new MixinElements());
	}
	
	public ParserRule getMixinRule() {
		return getMixinAccess().getRule();
	}

	//Orderable:
	//
	//	("orderable" | "ord" | "o") "?"?;
	public OrderableElements getOrderableAccess() {
		return (pOrderable != null) ? pOrderable : (pOrderable = new OrderableElements());
	}
	
	public ParserRule getOrderableRule() {
		return getOrderableAccess().getRule();
	}

	//SuperTypes:
	//
	//	">" (JcrStringList | "?");
	public SuperTypesElements getSuperTypesAccess() {
		return (pSuperTypes != null) ? pSuperTypes : (pSuperTypes = new SuperTypesElements());
	}
	
	public ParserRule getSuperTypesRule() {
		return getSuperTypesAccess().getRule();
	}

	//NodeTypeName:
	//
	//	"[" name=JcrString "]";
	public NodeTypeNameElements getNodeTypeNameAccess() {
		return (pNodeTypeName != null) ? pNodeTypeName : (pNodeTypeName = new NodeTypeNameElements());
	}
	
	public ParserRule getNodeTypeNameRule() {
		return getNodeTypeNameAccess().getRule();
	}

	//NsMapping:
	//
	//	"<" name=Prefix "=" uri=Uri ">";
	public NsMappingElements getNsMappingAccess() {
		return (pNsMapping != null) ? pNsMapping : (pNsMapping = new NsMappingElements());
	}
	
	public ParserRule getNsMappingRule() {
		return getNsMappingAccess().getRule();
	}

	//Prefix:
	//
	//	XiD;
	public PrefixElements getPrefixAccess() {
		return (pPrefix != null) ? pPrefix : (pPrefix = new PrefixElements());
	}
	
	public ParserRule getPrefixRule() {
		return getPrefixAccess().getRule();
	}

	//Uri:
	//
	//	JcrString;
	public UriElements getUriAccess() {
		return (pUri != null) ? pUri : (pUri = new UriElements());
	}
	
	public ParserRule getUriRule() {
		return getUriAccess().getRule();
	}

	//JcrStringList:
	//
	//	JcrString ("," JcrString)*;
	public JcrStringListElements getJcrStringListAccess() {
		return (pJcrStringList != null) ? pJcrStringList : (pJcrStringList = new JcrStringListElements());
	}
	
	public ParserRule getJcrStringListRule() {
		return getJcrStringListAccess().getRule();
	}

	//JcrString:
	//
	//	STRING | XiD;
	public JcrStringElements getJcrStringAccess() {
		return (pJcrString != null) ? pJcrString : (pJcrString = new JcrStringElements());
	}
	
	public ParserRule getJcrStringRule() {
		return getJcrStringAccess().getRule();
	}

	//XiD:
	//
	//	EXID | "mix";
	public XiDElements getXiDAccess() {
		return (pXiD != null) ? pXiD : (pXiD = new XiDElements());
	}
	
	public ParserRule getXiDRule() {
		return getXiDAccess().getRule();
	}

	////jcr_string:
	// //	quoted_string|UNQUOTED_STRING		
	// //;
	// //quoted_string:
	// //	"'" UNQUOTED_STRING "'"
	// //;
	// //TODO 
	//
	////According to JCR2.0 string terminal must follow XML char definition  / * see §3.2.2 Local Names * /
	//
	////terminal NAMESPACE_PREFIX : 
	//
	////	ID
	//
	////;
	//
	////terminal STRING	: 
	//
	////			'"' ( '\\' ('b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\') | !('\\'|'"') )* '"' |
	//
	////			"'" ( '\\' ('b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\') | !('\\'|"'") )* "'" 
	//
	////			|(!('\\'|"'"|'"') )+
	//
	////		; 
	//
	////terminal NAMESPACE_PREFIX : ('A'..'Z'|'a'..'z'|'0'..'9'|'_')+;
	//
	////terminal UNQUOTED_STRING : (XML_CHAR)+;
	//
	////terminal fragment XML_CHAR : ('\u0022'..'\u007E');
	//
	////terminal ML_COMMENT	: '/ *' -> '* /';
	//
	////terminal SL_COMMENT 	: '//' !('\n'|'\r')* ('\r'? '\n')?;
	//
	////
	//
	////terminal WS			: (' '|'\t'|'\r'|'\n')+;
	//
	//terminal EXID:
	//
	//	("a".."z" | "A".."Z" | "_") ("a".."z" | "A".."Z" | "_" | "0".."9" | ":" | "*")*;
	public TerminalRule getEXIDRule() {
		return (tEXID != null) ? tEXID : (tEXID = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "EXID"));
	} 

	//terminal ID:
	//
	//	"^"? ("a".."z" | "A".."Z" | "_") ("a".."z" | "A".."Z" | "_" | "0".."9")*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	} 

	//terminal INT returns ecore::EInt:
	//
	//	"0".."9"+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	} 

	//terminal STRING:
	//
	//	"\"" ("\\" ("b" | "t" | "n" | "f" | "r" | "u" | "\"" | "\'" | "\\") | !("\\" | "\""))* "\"" | "\'" ("\\" ("b" | "t" |
	//
	//	"n" | "f" | "r" | "u" | "\"" | "\'" | "\\") | !("\\" | "\'"))* "\'";
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	} 

	//terminal ML_COMMENT:
	//
	//	"/ *"->"* /";
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	} 

	//terminal SL_COMMENT:
	//
	//	"//" !("\n" | "\r")* ("\r"? "\n")?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	} 

	//terminal WS:
	//
	//	(" " | "\t" | "\r" | "\n")+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	} 

	//terminal ANY_OTHER:
	//
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	} 
}
