{"name":"Cnd-editor","tagline":"JCR (JSR-283) Compact Namespace and Node Type Definition (CND) Editor","body":"cnd-editor \r\n==========\r\n\r\n[JCR](http://en.wikipedia.org/wiki/Content_repository_API_for_Java) ([JSR-283](http://jcp.org/en/jsr/detail?id=283))\r\nCompact Namespace and Node Type Definition (CND) Editor.\r\n\r\nThe editor is built as eclipse plugin and supports code completion, validation, navigation, basic refactoring, syntax highlighting, \r\nauto formatting, code templates, outline and code generation. \r\n\r\nThe editor is based on [Xtext](http://www.eclipse.org/Xtext/) and can be used to build other DSL which need to reference CND.\r\nFor example one can reuse CND grammar to [build](https://github.com/evra/sling-contenteditor) jcr content descriptor DSL. It can be also used for java code generation using\r\n[xtend](http://www.eclipse.org/xtend/) language (for [example](https://github.com/evra/cnd2pojo-generator-example) POJO classes generation based on node type definitions).\r\n\r\nVisit users and developers discussion [group](https://groups.google.com/forum/#!forum/cnd-editor) if you have any questions or suggestions. \r\n\r\nInstallation\r\n--\r\nThis is an eclipse plugin and requires eclipse 4.3 (Kepler). \r\n\r\nYou can use our eclipse update site [http://dl.bintray.com/evra/eclipse](http://dl.bintray.com/evra/eclipse). \r\n\r\nAlternatively you can install the package manually from github:\r\n* Download the latest [release](https://github.com/evra/cnd-editor/releases) package.\r\n* Install the package using the eclipse update manager: Help -> Install new software -> Add -> Archive -> Select downloaded package\r\n* Select \"JCR CND Editor Feature\", select \"Contact all update sites during install to find required software\" \r\n* Click finish and restart eclipse.\r\n\r\nDevelopment\r\n--\r\nSee [project page](https://github.com/evra/cnd-editor) how to start contributing to the project\r\n\r\nMain features\r\n--\r\n**Syntax highlighting, formatting, outline**\r\n![highlighting, formatting, outline](http://evra.github.io/cnd-editor/images/screenshots/outline-lighlighting-formatting.PNG)\r\n\r\n**Navigation in CND file.** You can follow any valid node type reference, for example parent node type or primary node. You can also lookup node type documentation defined as comments before node type definition.\r\n![navigation](http://evra.github.io/cnd-editor/images/screenshots/navigation.png)\r\n\r\n**Content assist.** CND editor provides you a list of possible references to node types which can be inserted as parent types, primary types etc.\r\n![content-assist](http://evra.github.io/cnd-editor/images/screenshots/content-assist.png)\r\n\r\n**Validation.** The editor marks invalid (not existing) node type references.\r\n![validation](http://evra.github.io/cnd-editor/images/screenshots/validation.png)\r\n\r\n**Refactoring.** You can change the node type name and all references will be updated automatically.\r\n![refactoring](http://evra.github.io/cnd-editor/images/screenshots/refactoring.png)\r\n\r\n**Linked resources.** The editor automatically descovers all CND files in the referenced projects and in the java project classpath and adds find resources to project index. You can also add standard JSR283 node types provided as path variable for linked resources, alternatively you can add them in project properties dialog under Cnd category.\r\n![linked-resources](http://evra.github.io/cnd-editor/images/screenshots/linked-resources.PNG)\r\n\r\n**Code templates.** You can define your own CND code templates and apply them from the content assist popup. Some usefull templates are already provided by the editor plugin-in.\r\n![templates](http://evra.github.io/cnd-editor/images/screenshots/templates.PNG)","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}